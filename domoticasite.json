{
	"application": {
		"title": "Domotica",
		"meta_description": "Domotica",
		"meta_title": "Domotica",
		"theme": "bootswatch-flatly",
		"footer_text": "Domotica on Raspberry Pi 2 Model B - Copyright (c) 2017, MIT License",
		"roles": [
			"admin",
			"user"
		],
		"default_role": "user",
		"use_collection2": true,
		"collections": [
			{
				"name": "caldaia",
				"type": "collection",
				"fields": [
					{
						"name": "statoriscaldamento",
						"title": "Stato Riscaldamento",
						"type": "bool",
						"default": "false",
						"searchable": false,
						"sortable": false,
						"input": "checkbox"
					},
					{
						"name": "statotermostato",
						"title": "Stato del Termostato",
						"type": "bool",
						"default": "false",
						"searchable": false,
						"sortable": false,
						"input": "checkbox"
					},
					{
						"name": "statocaldaia",
						"title": "Stato della Caldaia",
						"type": "bool",
						"default": "false",
						"searchable": false,
						"sortable": false,
						"input": "checkbox",
						"show_in_dataview": false,
						"show_in_insert_form": false,
						"show_in_update_form": false
					},
					{
						"name": "sensoretermostato",
						"title": "Sensore utilizzato dal termostato",
						"type": "string",
						"searchable": false,
						"sortable": false,
						"input": "select",
						"lookup_query_name": "sensori_temp_lista",
						"lookup_key": "location",
						"lookup_field": "location"
					},
					{
						"name": "timescheduler",
						"title": "Intervallo letture",
						"type": "integer",
						"default": "60",
						"searchable": false,
						"sortable": false
					},
					{
						"name": "isteresi",
						"title": "Isteresi",
						"type": "float",
						"default": "0.5",
						"searchable": false,
						"sortable": false
					}
				],
				"owner_field": "ownerId",
				"roles_allowed_to_read": [
					"admin",
					"user"
				],
				"roles_allowed_to_update": [
					"admin",
					"owner",
					"user"
				]
			},
			{
				"name": "sensori",
				"type": "collection",
				"fields": [
					{
						"name": "ip",
						"title": "IP",
						"type": "string",
						"required": true,
						"searchable": false,
						"sortable": false,
						"show_in_dataview": false
					},
					{
						"name": "location",
						"title": "Location",
						"type": "string",
						"searchable": false
					},
					{
						"name": "note",
						"title": "Note",
						"type": "string",
						"searchable": false
					},
					{
						"name": "tipo",
						"title": "Tipo",
						"type": "string",
						"searchable": false
					},
					{
						"name": "temp",
						"title": "Temperature",
						"type": "float",
						"searchable": false,
						"show_in_insert_form": false,
						"show_in_update_form": false
					},
					{
						"name": "hum",
						"title": "Humidity",
						"type": "float",
						"searchable": false,
						"show_in_insert_form": false,
						"show_in_update_form": false
					},
					{
						"name": "active",
						"title": "Attivo?",
						"type": "bool",
						"searchable": false,
						"sortable": false,
						"input": "checkbox",
						"show_in_insert_form": false,
						"show_in_update_form": false
					},
					{
						"name": "timescheduler",
						"title": "Schedulazione lettura dati  (secondi)",
						"type": "integer",
						"searchable": false,
						"sortable": false
					},
					{
						"name": "on",
						"title": "Acceso?",
						"type": "bool",
						"searchable": false,
						"sortable": false,
						"input": "checkbox"
					}
				],
				"roles_allowed_to_insert": [
					"admin",
					"user"
				],
				"roles_allowed_to_update": [
					"admin",
					"user"
				],
				"roles_allowed_to_delete": [
					"admin"
				]
			},
			{
				"name": "cronotermostato",
				"type": "collection",
				"fields": [
					{
						"name": "day",
						"type": "string",
						"searchable": false
					},
					{
						"name": "h001",
						"title": "00-01",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h012",
						"title": "01-02",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h023",
						"title": "02-03",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h034",
						"title": "03-04",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h045",
						"title": "04-05",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h056",
						"title": "05-06",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h067",
						"title": "06-07",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h078",
						"title": "07-08",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h089",
						"title": "08-09",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h0910",
						"title": "09-10",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1011",
						"title": "10-11",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1112",
						"title": "11-12",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1213",
						"title": "12-13",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1314",
						"title": "13-14",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1415",
						"title": "14-15",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1516",
						"title": "15-16",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1617",
						"title": "16-17",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1718",
						"title": "17-18",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1819",
						"title": "18-19",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h1920",
						"title": "19-20",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h2021",
						"title": "20-21",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h2122",
						"title": "21-22",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h2223",
						"title": "22-23",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "h2324",
						"title": "23-24",
						"type": "integer",
						"searchable": false,
						"input": "select",
						"lookup_query_name": "rangetemp_lista",
						"lookup_key": "grado",
						"lookup_field": "grado"
					},
					{
						"name": "dayofweek",
						"title": "dayofweek",
						"type": "integer",
						"required": true,
						"searchable": false,
						"input": "select",
						"input_items": [
							{
								"value": "1",
								"title": "1"
							},
							{
								"value": "2",
								"title": "2"
							},
							{
								"value": "3",
								"title": "3"
							},
							{
								"value": "4",
								"title": "4"
							},
							{
								"value": "5",
								"title": "5"
							},
							{
								"value": "6",
								"title": "6"
							},
							{
								"value": "7",
								"title": "7"
							}
						],
						"show_in_dataview": false,
						"show_in_insert_form": false,
						"show_in_read_only_form": false
					}
				],
				"owner_field": "ownerId",
				"roles_allowed_to_read": [
					"admin",
					"user"
				],
				"roles_allowed_to_insert": [
					"admin",
					"user"
				],
				"roles_allowed_to_update": [
					"admin",
					"user"
				]
			},
			{
				"name": "rangetemp",
				"type": "collection",
				"fields": [
					{
						"name": "grado",
						"title": "grado",
						"type": "integer",
						"searchable": false,
						"sortable": false,
						"input": "select"
					}
				]
			},
			{
				"name": "watt",
				"type": "collection",
				"fields": [
					{
						"name": "day",
						"title": "day",
						"type": "string"
					},
					{
						"name": "pulsearr",
						"title": "pulsearr",
						"type": "array",
						"input": "crud",
						"array_item_type": "object"
					},
					{
						"name": "solararr",
						"title": "solararr",
						"type": "array",
						"input": "crud",
						"array_item_type": "object"
					}
				]
			}
		],
		"queries": [
			{
				"name": "admin_users",
				"collection": "users",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "admin_user",
				"collection": "users",
				"find_one": true,
				"filter": "{ \"_id\": \":userId\" }",
				"options": "{}"
			},
			{
				"name": "users_null",
				"collection": "users",
				"find_one": true,
				"filter": "{ \"_id\": null }",
				"options": "{}"
			},
			{
				"name": "current_user_data",
				"collection": "users",
				"find_one": true,
				"filter": "{ \"_id\": \"Meteor.userId()\" }",
				"options": "{}"
			},
			{
				"name": "sensori_lista",
				"collection": "sensori",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "sensore_dettaglio",
				"collection": "sensori",
				"find_one": true,
				"filter": "{\"_id\": \":sensoreId\" }",
				"options": "{}"
			},
			{
				"name": "sensori_vuoto",
				"collection": "sensori",
				"find_one": true,
				"filter": "{\"ip\": null }",
				"options": "{}"
			},
			{
				"name": "caldaia_dettaglio",
				"collection": "caldaia",
				"find_one": true,
				"filter": "{\"_id\": \":caldaiaId\"}",
				"options": "{}"
			},
			{
				"name": "caldaia_lista",
				"collection": "caldaia",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "cronotermostato_lista",
				"collection": "cronotermostato",
				"filter": "{}",
				"options": "{\n\t\"sort\": {\n\t\t\"dayofweek\": 1\n\t}\n}"
			},
			{
				"name": "cronotermostato_dettaglio",
				"collection": "cronotermostato",
				"find_one": true,
				"filter": "{\"_id\": \":cronotermostatoId\" }",
				"options": "{}"
			},
			{
				"name": "sensori_temp_lista",
				"collection": "sensori",
				"filter": "{\n\t\"tipo\": \"DHT22\"\n}",
				"options": "{}"
			},
			{
				"name": "rangetemp_lista",
				"collection": "rangetemp",
				"filter": "{}",
				"options": "{}"
			},
			{
				"name": "watt_id",
				"collection": "watt",
				"find_one": true,
				"filter": "{\"day\":\":dayId\"}",
				"options": "{}",
				"related_queries": [
					{
						"name": "watt_list"
					}
				]
			},
			{
				"name": "watt_list",
				"collection": "watt",
				"filter": "{}",
				"options": "{}"
			}
		],
		"public_zone": {
			"type": "zone",
			"js": "var pageSession = new ReactiveDict();\n\nTemplate.TEMPLATE_NAME.created = function() {};\n\nTemplate.TEMPLATE_NAME.destroyed = function() {};\n\nfunction graph_update_data () {\n\tvar  e= Watt.findOne({day: pageSession.get('sessionDate')});\n\n\tconsole.log(e.pulsearr);\n    if ( e && e.solararr) {$('#mygraph').highcharts().series[1].setData(e.solararr);} \n    if ( e && e.pulsearr) {$('#mygraph').highcharts().series[0].setData(e.pulsearr);} \n}\n          \nTemplate.TEMPLATE_NAME.helpers({});\n\nTemplate.TEMPLATE_NAME.events({\n\t\"changeDate #datepicker\": function(event, template) {\n\t\tpageSession.set('sessionDate',moment(event.date).format(\"YYYYMMDD\"));\n\t\t$('#mygraph').highcharts().setTitle({ text: 'Giorno '+  moment(event.date).format(\"DD/MM/YYYY\") });\n\t\tgraph_update_data();      \n\t}\n});\n\n\nTemplate.TEMPLATE_NAME.rendered = function() {\n\tvar Options = {\n\tchart: {\n\t\trenderTo: 'mygraph',\n\t\ttype: 'area',\n\t\tanimation: Highcharts.svg,\n\t\tbackgroundColor: '#d3dae2',\n\t\tzoomType: 'x'\n\t},\n\ttitle: { text: 'Consumi Energia Elettrica', x: -20 },\n\tcredits: { enabled: false },\n    subtitle: { text: 'Source: matteosetti.noip.me', x: -20 },\n    xAxis: {\n\t\t\ttitle: { text: 'Ora' },\n            type: 'datetime',\n\t\t\tlabels: { /*dateTimeLabelFormats: { hour: \"%H:%M\"}*/ }\n\t}, \n    yAxis: {\n            title: { text: 'Potenza (Watth)' },\n\t\t\tgridLineColor: '#ababa4',\n\t\t\tlabels: { formatter: function() { return this.value + ' Watt'; } },\n                        plotLines: [{\n                                value: 0,\n                                width: 1,\n                                color: '#e7f410'\n                     }]\n              },\n\ttooltip: {valueSuffix: ' Watt', valueDecimals: 2},\n    legend: {\n              layout: 'vertical',\n              align: 'right',\n              verticalAlign: 'middle',\n              borderWidth: 0\n    },\n    series: [{\n\t\t\t\tname: 'Consumption',\n\t\t\t\tcolor: '#ee190e',\n\t\t\t\tplotOptions: {\n\t\t\t\t\tarea: {\n                      fillColor: {\n                          linearGradient: {x1: 0, y1: 0, x2: 0, y2: 1},\n                          stops: [\n                              [0, Highcharts.getOptions().colors[2]],\n                              [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]\n                          ]\n                      },\n                      marker: {radius: 2 },\n                      lineWidth: 4,\n                      states: { hover: {lineWidth: 1} },\n                      threshold: null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n             \n             \n\t\t\t{\n\t\t\tname: 'Production',\n\t\t\tcolor: '#4CEE0B',\n\t\t\tplotOptions: {\n\t\t\t\t\tarea: {\n\t\t\t\t\t\tfillColor: {\n\t\t\t\t\t\t\tlinearGradient: {x1: 0, y1: 0, x2: 0, y2: 1},\n                            stops: [\n                                [0, Highcharts.getOptions().colors[6]],\n                                [1, Highcharts.Color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]\n                            ]\n                        },\n\t\t\t\t\t\tmarker: { radius: 2 },\n\t\t\t\t\t\tlineWidth: 4,\n\t\t\t\t\t\tstates: { hover: { lineWidth: 1 } },\n\t\t\t\t\t\tthreshold: null\n\t\t\t\t\t}\n            }\n              \n\t}]\n};\n\n\tHighcharts.setOptions({global: {useUTC: false}});\n\tvar today = moment().format(\"YYYYMMDD\");\n\tvar mygraph = new Highcharts.Chart(Options);  \n\tmygraph.chartBackground.attr({fill: '#d3dae2'} );\n\tmygraph.setTitle({ text: 'Giorno '+  moment().format(\"DD/MM/YYYY\") });\n\tmygraph.series[0].name = \"Consumption\";\n\tmygraph.series[1].name = \"Production\";\n\tmygraph.series[0].update({dataLabels: {enabled: true }});\n    pageSession.set(\"sessionDate\", today);\n    this.autorun(function () {\n\t\tif (pageSession.get(\"sessionDate\") === today) {\t\t\t\n          graph_update_data();\n\t\t//doSomething();\n\t\t}\n        //console.log(\"signal arrivato, ma non faccio niente - data:\", Session.get('sessionDate'));\n\t});\n   \n\t$('#datepicker').datepicker({\n\t\ttodayHighlight: true,\n\t\tformat: 'dd/mm/yyyy',\n\t\tstartDate: '23/03/2017',\n\t\tendDate: new Date(),\n\t\tautoclose: true,\n\t\tsetDate: today\n\t});\n    $('#datepicker').datepicker('update');\t\n};\n",
			"components": [
				{
					"name": "left_menu",
					"type": "menu",
					"dest_selector": "#menu",
					"class": "nav navbar-nav",
					"items": [
						{
							"title": "DashBoard",
							"route": "dashboard"
						},
						{
							"title": "Webcam",
							"route": "webcam"
						},
						{
							"title": "Airplanes",
							"route": "airplanes"
						},
						{
							"title": "Power",
							"route": "power"
						},
						{
							"title": "Solar Power",
							"route": "solarpower"
						},
						{
							"title": "Docs",
							"route": "docs"
						}
					],
					"object_type": "menu"
				},
				{
					"name": "right_menu",
					"type": "menu",
					"dest_selector": "#menu",
					"class": "nav navbar-nav navbar-right",
					"items": [
						{
							"title": "Register",
							"route": "register"
						},
						{
							"title": "Login",
							"route": "login"
						}
					],
					"object_type": "menu"
				}
			],
			"pages": [
				{
					"name": "home_public",
					"type": "page",
					"components": [
						{
							"name": "home_jumbotron",
							"type": "jumbotron",
							"title": "Domoticasite",
							"text": "Web Application for home automation, the main function are:<br />- Programmable thermostat<br />- Display environmental temperature and humidity in real-time<br />- Comparison between energy power generated by photovoltaic system and power consumed in the home.<br /><br /> It is a IOT (Internet of things) solution, implemented on Raspberry 2, with the use of Wi-Fi sensor. The Web application is implemented with Meteor-Kitchen.<br />",
							"button_title": "Continue &raquo;",
							"button_route": "docs",
							"object_type": "jumbotron"
						}
					]
				},
				{
					"name": "login",
					"type": "page",
					"template": "login"
				},
				{
					"name": "register",
					"type": "page",
					"template": "register"
				},
				{
					"name": "verify_email",
					"type": "page",
					"template": "verify_email",
					"route_params": [
						"verifyEmailToken"
					]
				},
				{
					"name": "forgot_password",
					"type": "page",
					"template": "forgot_password"
				},
				{
					"name": "reset_password",
					"type": "page",
					"template": "reset_password",
					"route_params": [
						"resetPasswordToken"
					]
				},
				{
					"name": "webcam",
					"type": "page",
					"components": [
						{
							"name": "webcam_iframe",
							"type": "custom_component",
							"html": "<img src=\"https://matteosetti.noip.me/webcam/CGIProxy.fcgi?cmd=snapPicture2&usr=admin&pwd=admin\" height=\"850\" width=\"100%\">",
							"object_type": "custom_component"
						}
					]
				},
				{
					"name": "airplanes",
					"type": "page",
					"components": [
						{
							"name": "airplanes_comp",
							"type": "custom_component",
							"html": "<iframe src=\"https://matteosetti.noip.me/dump1090/\" height=\"700\" width=\"100%\"></iframe>",
							"object_type": "custom_component"
						}
					]
				},
				{
					"name": "solarpower",
					"type": "page",
					"components": [
						{
							"name": "solarpower",
							"type": "custom_component",
							"html": " <iframe src=\"https://matteosetti.noip.me/123solar\" height=\"700\" width=\"100%\"></iframe>",
							"object_type": "custom_component"
						}
					]
				},
				{
					"name": "docs",
					"type": "page",
					"components": [
						{
							"name": "side_menu",
							"type": "menu",
							"class": "nav nav-pills nav-stacked",
							"items": [
								{
									"title": "Getting starter",
									"route": "docs.getting_starter"
								},
								{
									"title": "Installation Guide",
									"route": "docs.installation_guide"
								},
								{
									"title": "Configuration Guide",
									"route": "docs.configuration_guide"
								},
								{
									"title": "Hardware",
									"route": "docs.hardware"
								}
							],
							"object_type": "menu"
						}
					],
					"pages": [
						{
							"name": "getting_starter",
							"type": "page",
							"title": "Getting starter",
							"components": [
								{
									"name": "getting_stater",
									"type": "markdown",
									"source": "<p>\n![alt-text-1](/images/meteor-icon.png)![alt-text-2](/images/highchart-icon.png)![alt-text-3](/images/rasp-icon.png)![alt-text-4](/images/esp8266-icon.png)![alt-text-5](/images/meteor-kitchen-icon.png)\n</p>\n\n\n### Domoticasite\n\nWeb Application for home automation, the main function are:\n\n- Programmable thermostat\n- Display environmental temperature and humidity in real-time\n- Comparison between energy power generated by photovoltaic system and power consumed in the home.\n\nIt is a IOT (Internet of things) solution, implemented on Raspberry, with the use of Wi-Fi sensors.\nThe Web application is implemented with Meteor-Kitchen.\n\nThe project is an evolution of previous abandoned personal projects.\n\n\n### Software: \n\n- Meteor (with meteor-kitchen)\n- Highcharts library\n- Apache2 (configured with proxypass)\n- EspEasy (firmware for ESP8266)\n\n### Hardware:\n\n- Server Web: Raspberry Pi2 Model B \n- WiFi Module: ESP8266\n- Sensors: DHT22 or Photoresistor\n\n\n",
									"object_type": "markdown"
								}
							]
						},
						{
							"name": "installation_guide",
							"type": "page",
							"title": "Installation Guide",
							"components": [
								{
									"name": "installation_tab_menu",
									"type": "menu",
									"class": "nav nav-tabs",
									"items": [
										{
											"title": "Build & Update",
											"route": "docs.installation_guide.build"
										},
										{
											"title": "Deploy",
											"route": "docs.installation_guide.build"
										},
										{
											"title": "Prepare Raspberry",
											"route": "docs.installation_guide.install"
										},
										{
											"title": "Mongodb",
											"route": "docs.installation_guide.mongodb"
										},
										{
											"title": "Dump1090 mutability",
											"route": "docs.installation_guide.install_dump1090_mutability"
										},
										{
											"title": "SSLH",
											"route": "docs.installation_guide.install_sslh"
										},
										{
											"title": "Letsencrypt",
											"route": "docs.installation_guide.install_letsencrypt"
										},
										{
											"title": "123Solar",
											"route": "docs.installation_guide.123_solar"
										}
									],
									"object_type": "menu"
								}
							],
							"pages": [
								{
									"name": "build",
									"type": "page",
									"components": [
										{
											"name": "build_update",
											"type": "markdown",
											"source": "### Prepared Windows development enviroment\n\nThe Domoticasite was created with meteor-kitchen (http://www.meteorkitchen.com)\n\n* Because of meteor-kitchen doesn't work on Raspberry you have compile the Domoticasite on other systems, for example on Windows.\n* Download and install last version of node.\n* Install npm for windows\n* npm install --global --production windows-build-tools\n* Download and install last version of meteor.\n* Download and install last version of meteor-kitchen.\n\n\n### Quickly  \nmeteor-kitchen ./Domoticasite.json ./Domoticasite --meteor-release 1.5.2.2\ncd ./Domoticasite\nmeteor build --architecture=os.linux.x86_64\n\n\n### Scripts for Windows enviroment\nScripts useful in order to build, upload and restart Domoticasite\n\n\n#### Build.bat\n    @echo off\n    echo BUILD\n    SET dir1=%~dp0\n    del /Q \"%dir1%\"\\Domoticasite.json\n    curl https://www.meteorkitchen.com/api/getapp/json/N526wRpB3xekvDM5M -o %dir1%\\Domoticasite.json\n    rmdir bundle /S /Q\n    mkdir emptyfolder\n    robocopy emptyfolder bundle /purge\n    rmdir emptyfolder\n    rmdir bundle \n    rmdir Domoticasite /S /Q\n    mkdir Domoticasite\n    meteor-kitchen %dir1%\\Domoticasite.json %dir1%\\Domoticasite --meteor-release 1.5.4\n    cd ./Domoticasite\n    meteor build --architecture=os.linux.x86_64 --directory %dir1% & cd %dir1%\n\n\n#### Upload.bat\n    pscp.exe -pw sonia123 -C -r bundle pi@192.168.1.132:/tmp\n    pscp.exe -pw sonia123 -C files/deploy.sh pi@192.168.1.132:/tmp\n    plink.exe -ssh -pw sonia123 -batch pi@192.168.1.132 chmod +x /tmp/deploy.sh;/tmp/deploy.sh;/bin/bash\n\n\n#### files/Deploy.sh\n    #!/bin/bash\n    PATH=/home/pi/.nvm/versions/node/v4.8.6/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games\n    echo $(date) | tee /tmp/deploy.log\n    forever stopall\n    rm -rf ~/Domoticasite\n    echo \" Moving bundle to /home/pi/Domoticasite...\"\n    cp -r /tmp/bundle ~/Domoticasite\n    rm ~/.forever/*.log\n    cd ~/Domoticasite/programs/server\n    meteor npm install --save node-gyp@3.6.0\n    meteor npm install --save node-pre-gyp@0.6.34\n    meteor npm install\n    meteor npm install --save wiringpi-node\n    meteor npm install --save git+https://github.com/HardwareProjects/node-dht-sensor.git\n    cd ~/Domoticasite\n    forever start main.js\n",
											"object_type": "markdown"
										}
									]
								},
								{
									"name": "install_letsencrypt",
									"type": "page",
									"components": [
										{
											"name": "install_letsencrypt",
											"type": "markdown",
											"source": "#### Install Letsencrypt\n\n    sudo apt-get install python-certbot-apache\n    sudo certbot --apache\n\nhttps://pimylifeup.com/raspberry-pi-ssl-lets-encrypt/\n\n\n### Renew certificate every 90 days\n\nThere are problems with sslh to automatically renew the certificate, see:\n\nhttps://github.com/certbot/certbot/issues/341 \n\n\nSo, mannualy make these commands:\n\n    modify /etc/apache2/site\n    modify /etc/apache2/site-enables/defaul.conf 4443 --> 433\n    sudo /etc/init.d/apache2 stop\n    sudo ./letsencrypt-auto certonly --standalone --email mtt_stt@yahoo.it -d matteosetti.noip.me",
											"object_type": "markdown"
										}
									]
								},
								{
									"name": "install_dump1090_mutability",
									"type": "page",
									"components": [
										{
											"name": "install_dump1090_mutability",
											"type": "markdown",
											"source": "### Install dump1090-mutability\nPrerequisited: Apache 2.4\n\nInstructions:\n    * sudo apt-get install libusb-1.0-0-dev librtlsdr-dev\n    * sudo wget https://github.com/mutability/dump1090/releases/download/v1.14/dump1090-mutability_1.14_armhf.deb\n    * Make /etc/modprobe.d/raspi-blacklist.conf\n        blacklist dvb_usb_rtl28xxu \n        blacklist rtl2832 \n        blacklist rtl2830\n\nLinks:\n* _http://podtynnyi.com/2015/10/11/installing-rtlsdr-on-raspberry-pi-2/_\n* _https://blackswan.ch/archives/567_\n* _https://forum.planefinder.net/threads/raspberry-pi-b-rpi2-rpi3-installation-instructions-for-raspbian-dump1090-data feeder.241/_\n\n\n\n### Configure dump1090-mutability\n\nhttps://www.kevinhooke.com/2014/07/26/installing-rtl-sdr-and-dump1090-on-a-raspberry-pi-to-receive-ads-b-signals/\n\n\n### Configuration dump1090-mutability\n\nAdd the following lines in /mods-enables/alias.conf:\n\n    Alias \"/data\" \"/run/dump1090-mutability\"\n    <Directory \"/run/dump1090-mutability\">\n          Require all granted\n    </Directory>\n\n    Alias \"/dump1090\" \"/usr/share/dump1090-mutability/html\"\n    <Directory \"/usr/share/dump1090-mutability/html\">\n           Options Indexes FollowSymLinks MultiViews\n           AllowOverride None\n           Require all granted\n           DirectoryIndex gmap.html\n    </Directory>\n    \n\n\n### Modify line of this file /usr/share/dump1090-mutability/html/gmapl.html\nFrom\n\t<link rel=\"stylesheet\" href=\"http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css\" />\n    \n    <form id=\"airframes_post\" method=\"POST\" action=\"http://www.airframes.org/\" target=\"_blank\" class=\"hidden\">\n\n\nto:\n\t<link rel=\"stylesheet\" href=\"https://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css\" />\n\t\n    <form id=\"airframes_post\" method=\"POST\" action=\"https://www.airframes.org/\" target=\"_blank\" class=\"hidden\">\n",
											"object_type": "markdown"
										}
									]
								},
								{
									"name": "install",
									"type": "page",
									"components": [
										{
											"name": "install_markdown",
											"type": "markdown",
											"source": "## Prepare Rasperry enviroment\nWith the following instructions you will be able prepare Raspberry the first time.\n\n\n\n### Install NVM\n\n    curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bash\n    \n\nInstall last version of node:\n\n    nvm install 4.8.6 \t\tnode v.4.8.4 is the node version used by Meteor 1.5.4\n    nvm alias default 4.8.6\t\t\n    \n    \nLink node & npm\n\n\tsudo rm /usr/bin/node\n    sudo rm /usr/bin/npm\n\tsudo ln -s /home/pi/.nvm/versions/node/v4.8.6/bin/node  /sbin/node\n\tsudo ln -s /home/pi/.nvm/versions/node/v4.8.6/bin/npm  /sbin/npm\n\n    \n    \nNote, useful command:\n    nvm install <version>       Download and install a <version>   \n    nvm install stable\t\t\tInstall last version of node\n    nvm alias default <version>\tChange default for every session\n    nvm use <version>           Modify PATH to use <version>\n    nvm ls                      List versions (installed versions are blue)\n\n\n#### Install NPM (optional)\nOptional because of we use NPM library installed with NVM\n  \n\n\tsudo apt-get install npm\n    \n\nInstall npm version (4.6.1) compatible with Meteor 1.5.4\n    \n    npm install -g npm@x.x.x\n\n\n#### Install GIT\n\n    sudo apt-get install git\n\n\n#### Install Meteor 1.5.4\n\n\tcd /home/pi\n    git clone -b \"1.5.4\" https://github.com/mttstt/meteor.git\n    cd meteor ./scripts/generate-dev-bundle.sh > out.log 2>&1 &\n    ./meteor > out2.log 2>&1 &\n\n    \n\nLink meteor\n\n\tsudo ln -s /home/pi/meteor/meteor /sbin/meteor\n\n\nCheck installed version:\n\n    meteor --version\n    meteor node -v\n    meteor npm -v\n\n\n### Install Forever\nTo start mongodb at boot\nForever is an useful command to lanch programs\n\t  \n    sudo npm install -g forever\n\n\nNote, useful commands:\n\tforever start Domoticasite/main.js \tIn order to start job\n    forever stop Domoticasite/main.js\t\tIn order to stop job\n\n\n### Install forever-service\n\n\tnpm install -g forever-service\n\n\tsudo /home/pi/.nvm/versions/node/v4.8.6/bin/forever-service install Domoticasite --script main.js -e \"PORT=3000 MONGO_URL=mongodb://localhost/Domoticasite ROOT_URL=https://matteosetti.noip.me\"\n   \n\n#### Configure Wiring\nApply the following instructions in order to avoid use root account for wi-wiring:\n\n    http://wiringpi.com/wiringpi-update-to-2-29/    \n\n\n#### Configure /etc/enviroment\nAdd the following lines in /etc/enviroment\n\n    export WIRINGPI_GPIOMEM=1\n    PORT=3000\n    MONGO_URL=mongodb://localhost/Domoticasite\n    ROOT_URL=https://matteosetti.noip.me\n\n\n#### Google credentials\nIn order use google autentication, update the URI redirection in https://console.developers.google.com\n\nThen, create the following file in /home/pi/production-settings.json\n\n    {\"oauth\": {\n       \"google\": {\"clientId\": \"XXX.apps.googleusercontent.com\",\"secret\": \"XXX\"}        \n       }\n    }\n\n\n#### Create the new file file /etc/profile.d/METEOR_SETTINGS.sh\nThis is requested because production meteor app don't use --settings parameter. \n\n    export METEOR_SETTINGS=$(cat /home/pi/production-settings.json)\n\n\n### /etc/defaults/rcS\n\nConfigure:\n\tFSCKFIX=yes\n\nNote:\n\tsudo fdisk -l\n    umount /dev/sd?\n\tsudo fsck.ext4 -cDfty -C 0 /dev/sdb*\n     \n",
											"object_type": "markdown"
										}
									]
								},
								{
									"name": "123_solar",
									"type": "page",
									"components": [
										{
											"name": "123_solar",
											"type": "markdown",
											"source": "### Instruction install 123Solar (in Italian language)\n\nhttp://www.flanesi.it/doku/doku.php?id=123solar_mono_powerone_jessie\n\n\nStarting service ad boot:\n\n\tcd /etc/systemd/system\n    \n\tsudo chmod a+x 123solar.service\n    \n    sudo systemctl enable 123solar.service",
											"object_type": "markdown"
										}
									]
								},
								{
									"name": "install_sslh",
									"type": "page",
									"components": [
										{
											"name": "sslh",
											"type": "markdown",
											"source": "### Install & Configure SSLH\n\n\n\thttps://github.com/yrutschle/sslh\n\n\n\n### /etc/sslh\n\n\t# This is a basic configuration file that should provide\n\t# sensible values for \"standard\" setup.\n\n    verbose: false;\n    foreground: false;\n    inetd: false;\n    numeric: false;\n    transparent: false;\n    timeout: 2;\n    user: \"nobody\";\n    pidfile: \"/var/run/sslh.pid\";\n\n\n    # Change hostname with your external address name.\n    listen:\n    (\n        { host: \"192.168.1.132\"; port: \"443\"; }\n    );\n\n    protocols:\n    (\n         { name: \"ssh\"; service: \"ssh\"; host: \"192.168.1.132\"; port: \"22\"; },\n         { name: \"ssl\"; host: \"192.168.1.132\"; port: \"4443\"; log_level: 1; }\n    );\n\n",
											"object_type": "markdown"
										}
									]
								},
								{
									"name": "mongodb",
									"type": "page",
									"components": [
										{
											"name": "mongodb",
											"type": "markdown",
											"source": "### Install mongodb\nIn production eviroment you have install a dedicate server mongodb.\n  \n    sudo apt-get install mongodb-server\n\nNote: The last version of mongodb running on raspberry is 2.4.6, because of raspberry is a 32-bit OS on ARM cpu. Raspberry Pi-2 has ARM7 but Raspian OS is compiled for ARM6.\n\n\nTo start mongodb at boot\n\n\tupdate-rc.d mongodb defaults\n\n\n### Upgrade mongodb (optional) \nDownload Mongodb Version 3.0.14: \n\twget http://andyfelong.com/downloads/mongodb_stretch_3_0_14_core.zip\n\twget http://andyfelong.com/downloads/tools_mongodb_3_0_14.tar.gz\n\n\nCopy mongodb core files (mongo, mongos, mongos) to /usr/bin.\n    \n\nModify /lib/systemd/system/mongodb.service\n    [Unit]\n\tDescription=An object/document-oriented database\n\tDocumentation=man:mongod(1)\n\tAfter=network.target\n\n\t[Service]\n\tUser=mongodb\n\tExecStart=/usr/bin/mongod --config /etc/mongodb.conf\n\t\n\t[Install]\n\tWantedBy=multi-user.target\n\n\nUseful notes:\n\tsudo systemctl stop mongodb.service\n\tsudo systemctl daemon-reload\n\tsudo systemctl start mongodb.service\n",
											"object_type": "markdown"
										}
									]
								}
							]
						},
						{
							"name": "configuration_guide",
							"type": "page",
							"title": "Configuration Guide",
							"components": [
								{
									"name": "configuration_tab_menu",
									"type": "menu",
									"class": "nav nav-tabs",
									"items": [
										{
											"title": "Enviroment",
											"route": "docs.configuration_guide.production_enviroment"
										},
										{
											"title": "Apache2",
											"route": "docs.configuration_guide.configure_apache2"
										}
									],
									"object_type": "menu"
								}
							],
							"pages": [
								{
									"name": "configure_apache2",
									"type": "page",
									"components": [
										{
											"name": "config_apache2_mkdown",
											"type": "markdown",
											"source": "Apache > 2.4.10\n\n\n### Install Apache modules\n\n    sudo a2enmod proxy proxy_connect rewrite headers proxy_http proxy_wstunnel\n\n\n### Configure /etc/apache2/sites-enables/matteosetti.noip.me.conf\n\n\t<VirtualHost *:4443>\n         \t\tServerName matteosetti.noip.me\n                ServerAdmin mtt_stt@yahoo.it\n\n                SSLEngine on\n                SSLProxyEngine On\n                ProxyRequests Off\n\n                SSLCertificateFile /etc/letsencrypt/live/matteosetti.noip.me/cert.pem\n                SSLCertificateKeyFile /etc/letsencrypt/live/matteosetti.noip.me/privkey.pem\n                SSLCertificateChainFile /etc/letsencrypt/live/matteosetti.noip.me/chain.pem\n                SSLCACertificatePath /etc/ssl/certs/\n\n                DocumentRoot /var/www\n\n                ProxyPass /123solar http://localhost/123solar\n                ProxyPassReverse /123solar http://localhost/123solar\n\n                # ProxyPass /dump1090/ http://localhost/dump1090/\n                # ProxyPassReverse /dump1090/ http://localhost/dump1090/\n\n                ProxyPass /dump1090/ http://localhost:1090/\n                ProxyPassReverse /dump1090/ http://localhost:1090/\n\n\n                ProxyPass /webcam http://192.168.1.104:88/\n                ProxyPassReverse /webcam http://192.168.1.104:88/\n\n                ProxyPass / http://localhost:3000/\n                ProxyPassReverse / http://localhost:3000/\n\n                RewriteEngine on\n                RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC]\n                RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC]\n                RewriteRule .* ws://localhost:3000%{REQUEST_URI} [P]\n\n                BrowserMatch \"MSIE [2-6]\" \\\n                nokeepalive ssl-unclean-shutdown \\\n                downgrade-1.0 force-response-1.0\n                # MSIE 7 and newer should be able to use keepalive\n                BrowserMatch \"MSIE [17-9]\" ssl-unclean-shutdown\n \t</VirtualHost>\n\n\n\n### Configure /etc/apache2/ports.conf\n\n    # If you just change the port or add more ports here, you will likely also\n    # have to change the VirtualHost statement in\n    # /etc/apache2/sites-enabled/000-default.conf\n    Listen 80\n    <IfModule ssl_module>\n      \t    Listen 4443\n    </IfModule>\n    <IfModule mod_gnutls.c>\n\t    Listen 4443\n    </IfModule>\n    # vim: syntax=apache ts=4 sw=4 sts=4 sr noet\n\n\n\n### Configure /etc/apache2/mods-enabledalias.conf\n\n\n\t<IfModule alias_module>\n        # Aliases: Add here as many aliases as you need (with no limit). The format is\n        # Alias fakename realname\n        #\n        # Note that if you include a trailing / on fakename then the server will\n        # require it to be present in the URL.  So \"/icons\" isn't aliased in this\n        # example, only \"/icons/\".  If the fakename is slash-terminated, then the\n        # realname must also be slash terminated, and if the fakename omits the\n        # trailing slash, the realname must also omit it.\n        #\n        # We include the /icons/ alias for FancyIndexed directory listings.  If\n        # you do not use FancyIndexing, you may comment this out.\n\n        Alias /icons/ \"/usr/share/apache2/icons/\"\n\n        <Directory \"/usr/share/apache2/icons\">\n                Options FollowSymlinks\n                AllowOverride None\n                Require all granted\n        </Directory>\n\n\n        Alias \"/data\" \"/run/dump1090-mutability\"\n        <Directory \"/run/dump1090-mutability\">\n                Require all granted\n        </Directory>\n\n        Alias \"/dump1090\" \"/usr/share/dump1090-mutability/html\"\n        <Directory \"/usr/share/dump1090-mutability/html\">\n                Options Indexes FollowSymLinks MultiViews\n                AllowOverride None\n                Require all granted\n                DirectoryIndex gmap.html\n        </Directory>\n\t</IfModule>\n",
											"object_type": "markdown"
										}
									]
								},
								{
									"name": "production_enviroment",
									"type": "page",
									"components": [
										{
											"name": "production_env_mkdown",
											"type": "markdown",
											"source": "### Prepare Windows development enviroment \n\nBecause of meteor-kitchen doesn't work on Raspberry you have compile the Domoticasite on other systems, for example on Windows.\nInstructions in order to prepare Windows development enviroment: \n\n* Install npm for windows\n\n* npm install --global --production windows-build-tools\n\n\n",
											"object_type": "markdown"
										}
									]
								}
							]
						},
						{
							"name": "hardware",
							"type": "page",
							"title": "Hardware",
							"components": [
								{
									"name": "hardware_tab_menu",
									"type": "menu",
									"class": "nav nav-tabs",
									"items": [
										{
											"title": "Raspberry",
											"route": "docs.hardware.hw_raspberry"
										},
										{
											"title": "Esp8266",
											"route": "docs.hardware.hw_esp8266"
										},
										{
											"title": "Esp8266 - pulse",
											"route": "docs.hardware.hw_pulse"
										}
									],
									"object_type": "menu"
								}
							],
							"pages": [
								{
									"name": "hw_raspberry",
									"type": "page",
									"components": [
										{
											"name": "hw_raspberry_markdown",
											"type": "markdown",
											"source": "### Hardaware costs\n\n* Raspberry Pi 2 Model B or higher (30 euro)\n\n* Raspebrry case (5 euro or less)\n\n* ESP8266-01 or/and NomdeMCU devkit or/and dev board ESP8266-12e (2 euro)\n\n* DHT22 sensor (2-5 euro)\n\n* Power Supply Buck Converter Step Down Module AC-DC 3.3V 600mA for Arduino (2,12 euro) - only to power ESP8266 without power charger\n\n* Photoresistor (0,10 euro)\n\n* Wires (3 euro)",
											"object_type": "markdown"
										}
									]
								},
								{
									"name": "hw_esp8266",
									"type": "page",
									"components": [
										{
											"name": "hw_esp8266_markdown",
											"type": "markdown",
											"source": "### Wiring ESP8266-01\n\n1. VCC & CH_PD -> 3.3V\n2. GPIO0 & GND -> GND\n3. RX -> TX\n4. TX -> RX\n\n=> Wiring ESP8266 Remember to put GPIO 0 to GND during flashing.\n\n### Wiring ESP8266-12\n\n1. VCC & CH_PD & GPIO0 --> VCC\n2. GND & GP015 --> GND\n3. RX -> TX\n4. TX -> RX\n\n=> Wiring ESP8266 Remember to put GPIO 0 to GND during flashing.\n\n### Instructions to prepare firmware the ESP8266** (release 1.1.0)\n\n1. Download source from (https://github.com/ESP8266nu/ESPEasy) EspEasy > R64\n2. follow the instrucions http://www.esp8266.nu/index.php/Tutorial_Arduino_Firmware_Upload\n3. Wiring ESP8266 Remeber to put GPIO 0 to GND during flashing.\n4. Configure Device section of ESPEasy\n\n### Instructions to upload EspEasy ESP8266-01 with Arduino 1.6.5\n\n1. Flash Size: 512K (64 SPIFF)\n2. Upload speed: 9600\n",
											"object_type": "markdown"
										}
									]
								},
								{
									"name": "hw_pulse",
									"type": "page",
									"components": [
										{
											"name": "hw_pulse_markdown",
											"type": "markdown",
											"source": "### ESPEASY Rules\nThis solution is too expensive, too many http get:\n\n    On System#Boot do    \n      SendToHTTP 192.168.1.130,8081,/lux/Reboot\n    endon\n\n    on Pulse#Count>0 do\n     SendToHTTP 192.168.1.130,8081,/lux/[Pulse#Count],[Pulse#Total]\n    endon\n\n---------------------\nBetter send \"count\" pulse every minute:\n\n\n    on Pulse#Count do\n      SendToHTTP 192.168.1.130,8081,/lux/[Pulse#Count],[Pulse#Total]\n    endon\n    \n(remeber put Delay = 60 on sensor tab)\n\n------------------------\n### Measure KW from the numebr of pulses:\n\nKWatt = (3600/(1000 x seconds)) x pulses\n\n",
											"object_type": "markdown"
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "power",
					"type": "page",
					"query_name": "watt_id",
					"query_params": [
						{
							"name": "dayId",
							"value": "pageSession.get('sessionDate')"
						}
					],
					"components": [
						{
							"name": "1_custom_component",
							"type": "custom_component",
							"html": "<template name=\"TEMPLATE_NAME\">\n  <div style=\"text-align:center\">\n  {{title}}\n  </div>\n  {{> c3 data=myChartData id=\"chart1\"}}\n</template>\n",
							"js": "var pageSession = new ReactiveDict();\n\nif (!pageSession.get('sessionDate')) {pageSession.set(\"sessionDate\", moment().format(\"YYYYMMDD\"));}\n\n\n// ricordarsi di commentare nel file controller la riga watt_list\nTracker.autorun(function(){\n\tconsole.log('sessionDate changed',pageSession.get('sessionDate'));\n\tMeteor.subscribe('watt_id', pageSession.get('sessionDate'));\n});\n\n\nTemplate.TEMPLATE_NAME.created = function() {\n};\n\nTemplate.TEMPLATE_NAME.destroyed = function() {};\n\nTemplate.TEMPLATE_NAME.rendered = function() {};\n\n\nTemplate.TEMPLATE_NAME.helpers({\n  \n\t\"title\": function() {return moment(pageSession.get('sessionDate')).format(\"DD/MM/YYYY\");},\n  \n\t\"myChartData\": function() {\n      \n      \n      var f = Watt.findOne({},{});\n      \n        if (f && f.pulsearr) {\n\t\t\tvar x1 = _.pluck(f.pulsearr, 'x');\n\t\t\tvar y1 = _.pluck(f.pulsearr, 'y');\n\t\t\tx1.unshift('x1'); y1.unshift('Consumo');\n\t\t} else { var x1 = ['x1','0']; var y1 = ['Consumo',moment().unix()];}\n      \n        if (f && f.solararr) {\n\t\t\tvar x2 = _.pluck(f.solararr, 'x');\n\t\t\tvar y2 = _.pluck(f.solararr, 'y');\n\t\t\tx2.unshift('x2'); y2.unshift('Produzione');  \n\t\t} else { var x2 = ['x2','0']; var y2 =['Produzione',moment().unix()];} \n      \n\t//\tconsole.log('x1',x1);console.log('y1',y1);\n\t//\tconsole.log('x2',x2);console.log('y2',y2);\n      \n\t\treturn {\n\t\t\tdata: {\n\t\t\t\txs: {'Consumo':'x1', 'Produzione':'x2'},\n              \txFormat: '%Y',\n\t\t\t\tcolumns: [x1,x2,y1,y2],\n\t\t\t\ttype: 'area-spline'\n\t\t\t},         \n        \taxis: {\n                x: {\n                    type: 'timeseries',\n                    localtime: true,\n                    tick: {format: '%H:%M'}\n\t\t\t\t},\n              y: { label: 'Watt',max: 3500,min: 0}\n\t\t\t},\n          \tgrid: { y: {show: true } },\n          \tzoom: { enabled: true },\n          color: { pattern: ['#ffbcbc','#98f484']}\n\t\t};\n\t}\n});\n\n\nTemplate.TEMPLATE_NAME.events({});\n\n",
							"jsx": "export const TEMPLATE_NAME = React.createClass({\n\trender() {\n\t\treturn (\n\t\t);\n\t}\n});\n",
							"object_type": "custom_component"
						},
						{
							"name": "2_custom_component",
							"type": "custom_component",
							"html": "<template name=\"TEMPLATE_NAME\">\n  \n  \t  <div class=\"input-group date\" id=\"datepicker\" style=\"width: 25%\">\n      \t<input type=\"text\" class=\"form-control\" />\n      \t<span class=\"input-group-addon\">\n\t  \t<span class=\"fa fa-calendar\"></span></span>\n      </div>\n\n</template>\n",
							"js": "Template.TEMPLATE_NAME.created = function() {\n\n};\n\nTemplate.TEMPLATE_NAME.destroyed = function() {\n\n};\n\nTemplate.TEMPLATE_NAME.rendered = function() {\n  \tvar today = moment().format(\"YYYYMMDD\");\n\t$('#datepicker').datepicker({\n\t\ttodayHighlight: true,\n\t\tformat: 'dd/mm/yyyy',\n\t\tstartDate: '23/03/2017',\n\t\tendDate: new Date(),\n\t\tautoclose: true,\n\t\tsetDate: today\n\t});\n    $('#datepicker').datepicker('update');\n};\n\n\nTemplate.TEMPLATE_NAME.helpers({});\n\n\nTemplate.TEMPLATE_NAME.events({  \n  \"changeDate #datepicker\": function(event, template) {\n\t\tpageSession.set('sessionDate',moment(event.date).format(\"YYYYMMDD\"));\n\t\t//console.log('pageSession.set',moment(event.date).format(\"YYYYMMDD\")); \n\t\t}\n});\n\n",
							"jsx": "export const TEMPLATE_NAME = React.createClass({\n\trender() {\n\t\treturn (\n\t\t);\n\t}\n});\n",
							"object_type": "custom_component"
						},
						{
							"name": "3_custom_component",
							"type": "custom_component",
							"html": "<template name=\"TEMPLATE_NAME\">\n\n   <h1> data loading ... </h1>\n  {{#each sensor }}\n  <div>\n     {{this}}\n  </div>\n  {{/each}}\n\n</template>\n",
							"js": "\n\nTemplate.TEMPLATE_NAME.created = function() {\n\n};\n\nTemplate.TEMPLATE_NAME.destroyed = function() {\n\n};\n\nTemplate.TEMPLATE_NAME.rendered = function() {\n\n};\n\nTemplate.TEMPLATE_NAME.helpers({\n\n   'sensor' : function(){\n\t\tvar f = Watt.findOne({});\n\t\tif (f && f.pulsearr) {\n\t\t\t\t\t\t\t\t// console.log('OK'); \n                              return  _.pluck(f.pulsearr,'y');}\n\t\telse {\n          //console.log('NULL:',pageSession.get('sessionDate')); \n          return ['not found ;-('];}  \n   }\n});\n\nTemplate.TEMPLATE_NAME.events({\n\n});",
							"jsx": "export const TEMPLATE_NAME = React.createClass({\n\trender() {\n\t\treturn (\n\t\t);\n\t}\n});\n",
							"object_type": "custom_component"
						}
					],
					"text": "Raffronto tra potenza elettrica prodotta tramite impianto fotovoltaico e consumi casalinghi."
				},
				{
					"name": "dashboard",
					"type": "page",
					"query_name": "sensori_lista",
					"components": [
						{
							"name": "1_custom_component",
							"type": "custom_component",
							"html": "<template name=\"TEMPLATE_NAME\">\n  \n  \n\t{{#each x in sensor }}\n\t\t<div class=\"col-md-3 text-center\">\n\t\t\t<br><br>\n\t\t\t{{> c3 data=x.hum id=x.idhum}}\n\t\t\t<br>\n\t\t\tUmidità {{x.location}} %\n\t\t\t<br><br>\n\t\t\t{{> c3 data=x.temp id=x.idtemp}}\n\t\t\t<br>\n\t\t\tTemperatura {{x.location}} °C\n\t\t</div>\n\t{{/each}}\n  \n\n</template>\n  \n",
							"js": "Template.TEMPLATE_NAME.helpers({\n/*\n\t\"location\": function() {\n\t\t\t\t      return Sensori.find({ \"tipo\" :  {$regex : \".*DHT22.*\"} }, { sort: { active: -1 }});\n\t\t\t},\n*/\n\t\"sensor\": function() {\n\t\t      var f = Sensori.find({ \"tipo\" :  {$regex : \".*DHT22.*\"} }, { sort: { active: -1 }});\n\t\t\t\t\tvar b = [];\n\t\t\t\t\tf.forEach((p) => { b.push({location : p.location, temp: grapht(p.temp),hum: graphu(p.hum),idtemp:p.location+\"t\",idhum:p.location+\"u\"});});\n\t\t\t\t\treturn b;\n\t\t\t\t}\n\t});\n\nfunction grapht (y) {\n\tif (y == null)  {y=0}\n\treturn {\n\t\t\t\tdata: {\n\t\t\t\t\t\t\tcolumns: [ ['data', y] ],\n\t\t\t\t\t\t\ttype: 'gauge',\n\t\t\t\t\t},\n\t\t\t\t\tgauge: {\n\t\t\t        label: {\n\t\t\t            format: function(value, ratio) {\n\t\t\t                return value;\n\t\t\t            },\n\t\t\t  //          show: false // to turn off the min/max labels.\n\t\t\t        },\n\t\t\t    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change\n\t\t\t    max: 40, // 100 is default\n\t\t\t    units: ' °C',\n\t\t\t //   width: 39 // for adjusting arc thickness\n\t\t\t\t\t},\n\t\t\t\t\tcolor: { pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.\n\t\t\t\t\t\tthreshold: {\n\t\t\t\t\t\t\t\t//            unit: 'value', // percentage is default\n\t\t\t\t\t\t\t\t//            max: 200, // 100 is default\n\t\t\t\t\t\t\tvalues: [30, 60, 90, 100]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsize: { height: 180 }\n\t\t\t}\n};\n\n\nfunction graphu (y) {\n\tif (y == null)  {y=0}\n\treturn {\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\tcolumns: [ ['data', y] ],\n\t\t\t\t\t\t\t\ttype: 'gauge',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgauge: {\n\t\t\t\t//        label: {\n\t\t\t\t//            format: function(value, ratio) {\n\t\t\t\t//                return value;\n\t\t\t\t//            },\n\t\t\t\t//            show: false // to turn off the min/max labels.\n\t\t\t\t//        },\n\t\t\t\t//    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change\n\t\t\t\t//    max: 100, // 100 is default\n\t\t\t\t//    units: ' %',\n\t\t\t\t//    width: 39 // for adjusting arc thickness\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcolor: { pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.\n\t\t\t\t\t\t\tthreshold: {\n\t\t\t\t\t\t\t\t\t            unit: 'value', // percentage is default\n\t\t\t\t\t\t\t\t\t//            max: 200, // 100 is default\n\t\t\t\t\t\t\t\tvalues: [30, 60, 90, 100]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsize: { height: 180 }\n\t\t\t}\n};\n\n\n",
							"jsx": "export const TEMPLATE_NAME = React.createClass({\n\trender() {\n\t\treturn (\n\t\t);\n\t}\n});\n",
							"object_type": "custom_component"
						}
					]
				}
			]
		},
		"private_zone": {
			"type": "zone",
			"components": [
				{
					"name": "left_menu",
					"type": "menu",
					"dest_selector": "#menu",
					"class": "nav navbar-nav",
					"items": [
						{
							"title": "Home",
							"route": "home_private",
							"icon_class": "fa fa-home"
						},
						{
							"title": "Sensori",
							"route": "sensori"
						},
						{
							"title": "Caldaia",
							"route": "caldaia"
						},
						{
							"title": "CronoTermostato",
							"route": "cronotermostato"
						}
					],
					"object_type": "menu"
				},
				{
					"name": "right_menu",
					"type": "menu",
					"dest_selector": "#menu",
					"class": "nav navbar-nav navbar-right",
					"items": [
						{
							"title": "Admin",
							"route": "admin",
							"icon_class": "fa fa-wrench"
						},
						{
							"title": "{{userEmail}}",
							"icon_class": "fa fa-cog",
							"items": [
								{
									"title": "Settings",
									"route": "user_settings"
								},
								{
									"title": "Logout",
									"route": "logout"
								}
							]
						}
					],
					"object_type": "menu"
				}
			],
			"pages": [
				{
					"name": "home_private",
					"type": "page",
					"title": "Welcome {{userFullName}}!"
				},
				{
					"name": "admin",
					"type": "page",
					"components": [
						{
							"name": "side_menu",
							"type": "menu",
							"class": "nav nav-stacked nav-pills",
							"items": [
								{
									"title": "Users",
									"route": "admin.users"
								}
							],
							"object_type": "menu"
						}
					],
					"roles": [
						"admin"
					],
					"pages": [
						{
							"name": "users",
							"type": "page",
							"components": [
								{
									"name": "view",
									"type": "data_view",
									"title": "Users",
									"query_name": "admin_users",
									"text_if_empty": "No users yet",
									"insert_route": "admin.users.insert",
									"details_route": "admin.users.details",
									"edit_route": "admin.users.edit",
									"details_route_params": [
										{
											"name": "userId",
											"value": "this._id"
										}
									],
									"edit_route_params": [
										{
											"name": "userId",
											"value": "this._id"
										}
									],
									"fields": [
										{
											"name": "profile.name",
											"title": "Name",
											"type": "string"
										},
										{
											"name": "profile.email",
											"title": "E-mail",
											"type": "string"
										},
										{
											"name": "roles",
											"title": "Role",
											"type": "string"
										}
									],
									"object_type": "data_view"
								}
							],
							"pages": [
								{
									"name": "details",
									"type": "page",
									"components": [
										{
											"name": "details_form",
											"type": "form",
											"title": "User details",
											"query_name": "admin_user",
											"mode": "read_only",
											"close_route": "admin.users",
											"back_route": "admin.users",
											"fields": [
												{
													"name": "profile.name",
													"title": "Name",
													"type": "string"
												},
												{
													"name": "profile.email",
													"title": "E-mail",
													"type": "email"
												},
												{
													"name": "roles",
													"title": "Role",
													"type": "string"
												}
											],
											"object_type": "form"
										}
									],
									"route_params": [
										"userId"
									]
								},
								{
									"name": "insert",
									"type": "page",
									"components": [
										{
											"name": "insert_form",
											"type": "form",
											"title": "Add new user",
											"query_name": "users_null",
											"mode": "insert",
											"submit_route": "admin.users",
											"cancel_route": "admin.users",
											"fields": [
												{
													"name": "profile.name",
													"title": "Name",
													"type": "string",
													"required": true
												},
												{
													"name": "profile.email",
													"title": "E-mail",
													"type": "email",
													"required": true
												},
												{
													"name": "password",
													"title": "Password",
													"type": "string",
													"required": true,
													"input": "password"
												}
											],
											"object_type": "form"
										}
									]
								},
								{
									"name": "edit",
									"type": "page",
									"components": [
										{
											"name": "edit_form",
											"type": "form",
											"title": "Edit user",
											"query_name": "admin_user",
											"mode": "update",
											"submit_route": "admin.users",
											"cancel_route": "admin.users",
											"fields": [
												{
													"name": "profile.name",
													"title": "Name",
													"type": "string",
													"required": true
												},
												{
													"name": "profile.email",
													"title": "E-mail",
													"type": "email",
													"required": true
												},
												{
													"name": "roles",
													"title": "Role",
													"type": "array",
													"input": "radio",
													"input_items": [
														{
															"value": "user",
															"title": "User"
														},
														{
															"value": "admin",
															"title": "Admin"
														},
														{
															"value": "blocked",
															"title": "Blocked"
														}
													]
												}
											],
											"object_type": "form"
										}
									],
									"route_params": [
										"userId"
									]
								}
							]
						}
					]
				},
				{
					"name": "user_settings",
					"type": "page",
					"components": [
						{
							"name": "side_menu",
							"type": "menu",
							"class": "nav nav-stacked nav-pills",
							"items": [
								{
									"title": "Profile",
									"route": "user_settings.profile"
								},
								{
									"title": "Change password",
									"route": "user_settings.change_pass"
								}
							],
							"object_type": "menu"
						}
					],
					"roles": [
						"user",
						"admin"
					],
					"pages": [
						{
							"name": "profile",
							"type": "page",
							"components": [
								{
									"name": "edit_form",
									"type": "form",
									"title": "Edit your profile",
									"query_name": "current_user_data",
									"mode": "update",
									"submit_route": "user_settings.profile",
									"fields": [
										{
											"name": "profile.name",
											"title": "Name",
											"type": "string",
											"required": true
										},
										{
											"name": "profile.email",
											"title": "E-mail",
											"type": "email",
											"required": true
										},
										{
											"name": "profile.facebook",
											"title": "Facebook URL",
											"type": "string"
										},
										{
											"name": "profile.google",
											"title": "Google+ URL",
											"type": "string"
										},
										{
											"name": "profile.twitter",
											"title": "Twitter ID",
											"type": "string"
										},
										{
											"name": "profile.website",
											"title": "Website URL",
											"type": "string"
										}
									],
									"object_type": "form"
								}
							]
						},
						{
							"name": "change_pass",
							"type": "page",
							"template": "change_pass"
						}
					]
				},
				{
					"name": "logout",
					"type": "page",
					"template": "logout"
				},
				{
					"name": "sensori",
					"type": "page",
					"components": [
						{
							"name": "view",
							"type": "data_view",
							"title": "Configurazione sensori",
							"query_name": "sensori_lista",
							"text_if_empty": "Nessun sensore",
							"insert_route": "sensori.inserisci",
							"details_route": "sensori.dettagli",
							"edit_route": "sensori.modifica",
							"details_route_params": [
								{
									"name": "sensoreId",
									"value": "this._id"
								}
							],
							"edit_route_params": [
								{
									"name": "sensoreId",
									"value": "this._id"
								}
							],
							"object_type": "data_view"
						}
					],
					"pages": [
						{
							"name": "inserisci",
							"type": "page",
							"components": [
								{
									"name": "inserisci_form",
									"type": "form",
									"title": "Nuovo sensore",
									"query_name": "sensori_vuoto",
									"mode": "insert",
									"submit_route": "sensori",
									"cancel_route": "sensori",
									"object_type": "form"
								}
							]
						},
						{
							"name": "dettagli",
							"type": "page",
							"components": [
								{
									"name": "dettagli_form",
									"type": "form",
									"title": "Dettagli",
									"query_name": "sensore_dettaglio",
									"mode": "read_only",
									"close_route": "sensori",
									"back_route": "sensori",
									"object_type": "form"
								}
							],
							"route_params": [
								"sensoreId"
							]
						},
						{
							"name": "modifica",
							"type": "page",
							"components": [
								{
									"name": "modifica_form",
									"type": "form",
									"title": "Modifica sensore",
									"query_name": "sensore_dettaglio",
									"mode": "update",
									"submit_route": "sensori",
									"cancel_route": "sensori",
									"object_type": "form"
								}
							],
							"route_params": [
								"sensoreId"
							]
						}
					]
				},
				{
					"name": "caldaia",
					"type": "page",
					"query_name": "caldaia_lista",
					"components": [
						{
							"name": "view",
							"type": "data_view",
							"title": "Configurazione caldaia",
							"query_name": "caldaia_lista",
							"text_if_empty": "Errore! non rilevato niente",
							"details_route": "caldaia.dettagli",
							"edit_route": "caldaia.modifica",
							"details_route_params": [
								{
									"name": "caldaiaId",
									"value": "this._id"
								}
							],
							"edit_route_params": [
								{
									"name": "caldaiaId",
									"value": "this._id"
								}
							],
							"object_type": "data_view"
						}
					],
					"pages": [
						{
							"name": "dettagli",
							"type": "page",
							"components": [
								{
									"name": "dettagli_form",
									"type": "form",
									"title": "Dettagli caldaia",
									"query_name": "caldaia_dettaglio",
									"mode": "read_only",
									"close_route": "caldaia",
									"back_route": "caldaia",
									"object_type": "form"
								}
							],
							"route_params": [
								"caldaiaId"
							]
						},
						{
							"name": "modifica",
							"type": "page",
							"components": [
								{
									"name": "modifica_form",
									"type": "form",
									"title": "Modifica funzionamento caldaia",
									"query_name": "caldaia_dettaglio",
									"mode": "update",
									"submit_route": "caldaia",
									"cancel_route": "caldaia",
									"object_type": "form"
								}
							],
							"route_params": [
								"caldaiaId"
							]
						}
					]
				},
				{
					"name": "cronotermostato",
					"type": "page",
					"components": [
						{
							"name": "view",
							"type": "data_view",
							"title": "Programmazione settimanale",
							"query_name": "cronotermostato_lista",
							"text_if_empty": "Non trovata la programmazione settimanale",
							"edit_route": "cronotermostato.modifica",
							"edit_route_params": [
								{
									"name": "cronotermostatoId",
									"value": "this._id"
								}
							],
							"object_type": "data_view"
						},
						{
							"name": "Mybutton",
							"type": "custom_component",
							"query_name": "caldaia_lista",
							"html": "<template name=\"Mybutton\">\n\t<div id=\"container\" align=\"center\">\n  \t\t<div style=\"width:33%; float:left\">\n\t\t\t<div class=\"switch demo4\" align=\"center\"> <input type=\"checkbox\" id=\"riscaldamento\" checked={{riscaldamento}}> <label><i class='icon-off'></i></label><div style=\"font-style:italic\">Riscaldamento</div></div>\n\t\t</div>\n        <div style=\"width:33%; float:left\">\n\t\t\t{{#if flame}}\n\t\t\t\t<img src=\"images/flame.gif\" alt=\"Fiamma\" border=\"5\" style=\"width:152px;height:114px\">\n\t\t\t{{else}}\n\t\t\t\t<img border=\"5\" style=\"width:152px;height:114px\">\n\t\t\t{{/if}}\t\t\n\t\t</div>\n\t\t<div style=\"width:33%; float:left\">\n\t\t\t<div class=\"switch demo4\" align=\"center\"> <input type=\"checkbox\" id=\"termostato\" checked={{termostato}}> <label><i class='icon-off'></i></label><div style=\"font-style:italic\">Termostato</div> </div>\n\t\t</div>\n\t</div>\t\n</template>",
							"js": "Template.Mybutton.helpers({\n    \"flame\": function() {\n\t\tconsole.log('caldaia:',Caldaia.findOne().statocaldaia);\n\t\treturn Caldaia.findOne().statocaldaia;\n\t},\n\t\"riscaldamento\": function() {\n\t\treturn Caldaia.findOne().statoriscaldamento;\n\t},\n\t\"termostato\": function() {\n\t\treturn Caldaia.findOne().statotermostato;\n\t}\n});\n\n\nTemplate.Mybutton.events({\n\t'change input#riscaldamento': function(event) {\n\t\tevent.preventDefault();\n      \n      \n\t\tvar id = Caldaia.findOne()._id;\n      \n\t\tvar valuesR = {};\n\t\tvaluesR.statoriscaldamento = event.target.checked;\n\n\t\tconsole.log('values:',valuesR);\n      \n\t\tMeteor.call(\"caldaiaUpdate\", id, valuesR, function(err, res) {\n\t\t\tif(err) {\n\t\t\t\talert(err.message);\n\t\t\t}\n\t\t});\n      \n      \n      // Caldaia.update({_id: id}, {$set:{ statoriscaldamento: event.target.checked }});\n\t\n    \n\t\t},\n\t'change input#termostato': function(event) {\n\t\tevent.preventDefault();\n\t\tvar id = Caldaia.findOne()._id;\n       \n        var valuesT = {};\n\t\tvaluesT.statotermostato = event.target.checked;\n\n\t\tconsole.log('values:',valuesT);\n      \n\t\tMeteor.call(\"caldaiaUpdate\", id, valuesT, function(err, res) {\n\t\t\tif(err) {\n\t\t\t\talert(err.message);\n\t\t\t}\n\t\t});\n      \n\n\t//\tCaldaia.update({_id: id}, {$set:{ statotermostato: event.target.checked }});\n      \n      \n\t\t}\n});\n\n",
							"object_type": "custom_component"
						}
					],
					"pages": [
						{
							"name": "modifica",
							"type": "page",
							"components": [
								{
									"name": "modifica_form",
									"type": "form",
									"title": "Programmazione giornaliera",
									"query_name": "cronotermostato_dettaglio",
									"mode": "update",
									"submit_route": "cronotermostato",
									"cancel_route": "cronotermostato",
									"object_type": "form"
								}
							],
							"route_params": [
								"cronotermostatoId"
							]
						}
					]
				}
			]
		},
		"send_verification_email": true,
		"login_with_google": true,
		"server_startup_code": "var fs = require(\"fs\");\nvar csvpath = \"/var/www/123solar/data/invt1/csv/\";\nvar csvpathwin = \"C://Users//matteo//Documents//GitHub//Domoticasite//files//20170318.csv\";\n\nconsole.log('=>',process.env.ROOT_URL,':',process.env.PORT);\n\nvar os = require('os');\nconsole.log('=> Domoticasite Server:',os.type(),' - ', os.release(), ' - ', os.platform());\n\nvar Raspberry = process.env.WIRINGPI_GPIOMEM == '1' ? true : false;\nconsole.log('=> Raspberry? ', Raspberry);\n\n\n//\n// funzione TODO: feature per cercare nuovi sensori in rete e comunicarne l'esistenza all'amministratore per la loro  inclusione.\n//\nfunction find_sensor (){\n\tvar base = \"192.168.1.\";\n\tvar i=1;\n\tfor (i = 1; index < 254; ++index) {  \n      var ip = base+i;\n      var oldip = Sensori.find({}).ip.map(function(row){return row;});\n\n      try { response = HTTP.get(\"http://\"+ip+\"/json\", {});\n\t\t\tif (response.data.Sensors[0].TaskName !== null) {\n\t\t\t\tSensori.insert({ ip: ip, location: response.data.Sensors[0].TaskName, note: '-', tipo: '', active: true, timescheduler: 30, on: true});\n\t\t\t}\n\t\t}\n      catch(e) {console.log('no found',ip,' -',e);}  \n\t}  \n}\n\n\nif (Sensori.find().count() === 0) {\n\tvar VariantSensoriSchema = {};\n\t//Edit.insert({text: 'o'});\n\tSensori.attachSchema(VariantSensoriSchema, {ip: {optional: false}, location: {optional: true}, note: {optional: true}, tipo: {optional: true}, temp: {optional: true}, hum: {optional: true}, active:{optional: true} });\n    Rangetemp.insert({grado: '15'});Rangetemp.insert({grado: '16'});Rangetemp.insert({grado: '17'});Rangetemp.insert({grado: '18'});Rangetemp.insert({grado: '19'});Rangetemp.insert({grado: '20'});Rangetemp.insert({grado: '21'});Rangetemp.insert({grado: '22'});Rangetemp.insert({grado: '23'});Rangetemp.insert({grado: '24'});Rangetemp.insert({grado: '25'});\n    Caldaia.insert({ statocaldaia: false, statoriscaldamento: false, statotermostato: false, sensoretermostato: 'Cameretta', isteresi: '0.5', timescheduler: '60' });\n\tSensori.insert({ ip: '127.0.0.1', location: 'Garage', note: '-', tipo: 'DHT22 (on PIN 22)', active: false, timescheduler: 30, on: true});\n\tSensori.insert({ ip: '192.168.1.111', location: 'Contatore', note: 'Consumi Enel', tipo: 'pulse', active:false, timescheduler: 30, on: true});\n\tSensori.insert({ ip: '192.168.1.112', location: 'Sala', note: '-', tipo: 'DHT22',active: false, timescheduler: 30, on: true });\n\tSensori.insert({ ip: '192.168.1.113', location: 'Cameretta', note: '-', tipo: 'DHT22', active: false, timescheduler: 30, on: true});\n\tSensori.insert({ ip: '192.168.1.114', location: 'Ingresso', note: '-', tipo: 'DHT22', active: false, timescheduler: 30, on: true});\n\tCronotermostato.insert({ day: 'Lunedì',    dayofweek: '1', h001: '18', h012: '18', h023: '18', h034: '18', h045: '18', h056: '18', h067: '18', h078: '18', h089: '18', h0910: '18', h1011: '18', h1112: '18', h1213: '18', h1314: '18', h1415: '18', h1516: '18', h1617: '18', h1718: '18', h1819: '18', h1920: '18', h2021: '18', h2122:'18', h2223:'18', h2324:'18' });\n\tCronotermostato.insert({ day: 'Martedì',   dayofweek: '2', h001: '18', h012: '18', h023: '18', h034: '18', h045: '18', h056: '18', h067: '18', h078: '18', h089: '18', h0910: '18', h1011: '18', h1112: '18', h1213: '18', h1314: '18', h1415: '18', h1516: '18', h1617: '18', h1718: '18', h1819: '18', h1920: '18', h2021: '18', h2122:'18', h2223:'18', h2324:'18' });\n\tCronotermostato.insert({ day: 'Mercoledì', dayofweek: '3', h001: '18', h012: '18', h023: '18', h034: '18', h045: '18', h056: '18', h067: '18', h078: '18', h089: '18', h0910: '18', h1011: '18', h1112: '18', h1213: '18', h1314: '18', h1415: '18', h1516: '18', h1617: '18', h1718: '18', h1819: '18', h1920: '18', h2021: '18', h2122:'18', h2223:'18', h2324:'18' });\n\tCronotermostato.insert({ day: 'Giovedì',   dayofweek: '4', h001: '18', h012: '18', h023: '18', h034: '18', h045: '18', h056: '18', h067: '18', h078: '18', h089: '18', h0910: '18', h1011: '18', h1112: '18', h1213: '18', h1314: '18', h1415: '18', h1516: '18', h1617: '18', h1718: '18', h1819: '18', h1920: '18', h2021: '18', h2122:'18', h2223:'18', h2324:'18' });\n\tCronotermostato.insert({ day: 'Venerdì',   dayofweek: '5', h001: '18', h012: '18', h023: '18', h034: '18', h045: '18', h056: '18', h067: '18', h078: '18', h089: '18', h0910: '18', h1011: '18', h1112: '18', h1213: '18', h1314: '18', h1415: '18', h1516: '18', h1617: '18', h1718: '18', h1819: '18', h1920: '18', h2021: '18', h2122:'18', h2223:'18', h2324:'18' });\n\tCronotermostato.insert({ day: 'Sabato',    dayofweek: '6', h001: '18', h012: '18', h023: '18', h034: '18', h045: '18', h056: '18', h067: '18', h078: '18', h089: '18', h0910: '18', h1011: '18', h1112: '18', h1213: '18', h1314: '18', h1415: '18', h1516: '18', h1617: '18', h1718: '18', h1819: '18', h1920: '18', h2021: '18', h2122:'18', h2223:'18', h2324:'18' });\n\tCronotermostato.insert({ day: 'Domenica',  dayofweek: '7', h001: '18', h012: '18', h023: '18', h034: '18', h045: '18', h056: '18', h067: '18', h078: '18', h089: '18', h0910: '18', h1011: '18', h1112: '18', h1213: '18', h1314: '18', h1415: '18', h1516: '18', h1617: '18', h1718: '18', h1819: '18', h1920: '18', h2021: '18', h2122:'18', h2223:'18', h2324:'18' });\n}\n\n\n\nif (Raspberry) {\n\t//  import wpi from 'wiringpi-node';\n\tvar wpi = require('wiringpi-node');\n\twpi.setup('sys');\n  \n\t// import sensorLib from 'node-dht-sensor';\n\tvar sensorLib = require('node-dht-sensor');\n\tvar GpioPin = 22;\n\tvar sensorType = 22; // 11 for DHT11, 22 for DHT22 and AM2302\n\tif (!sensorLib.initialize(sensorType, GpioPin)) {\n       console.log('Failed to initialize sensor');\n       process.exit(1);\n\t}\n\tvar readout = sensorLib.read();\n\tconsole.log('Pin GPIO del sensore sul Raspberry: ' + GpioPin + \" - T:\", readout.temperature.toFixed(1),\"- U:\", readout.humidity.toFixed(1));\n} \n\n\n\nfunction switchOnOff(onoff) {\n    var state = onoff ? 1 : 0;\n    console.log('function switchOnOff: ', state);\n    if (Raspberry) { wpi.pinMode(7,wpi.OUTPUT); wpi.digitalWrite(7,state);console.log('function switchOnOff : Inviato segnale al relay');}      \n}\n\n\nfunction cron_read_sensor (ip) {\n\tvar tipo = Sensori.findOne({ ip: ip }).tipo;  \n\tif (tipo == 'DHT22') {\n         try {    \n            var response = HTTP.get(\"http://\"+ip+\"/json\", {});\n            if (response.data !== null) {\n                   //console.log(ip,\" (\" , response.data.Sensors[0].TaskName,\") - T:\",response.data.Sensors[0].Temperature ,\"- U:\", response.data.Sensors[0].Humidity);\n                   Sensori.update({ip: ip}, {$set:{ hum: response.data.Sensors[0].Humidity, active: true, temp: response.data.Sensors[0].Temperature, location: response.data.Sensors[0].TaskName}});\n             } else {console.log('Warning reading sensor:',ip); Sensori.update({ip:ip}, {$set:{active: false}}); }\n\t\t}\n\t\tcatch(e){\n\t\t\tconsole.log('Warning reading sensor:',ip);\n\t\t\tSensori.update({ip: ip}, {$set:{ active: false}});\n\t\t}\n     }\n  \n//\tif (tipo == 'pulse')\t{\n//\t\tHTTP.get(\"http://\"+ip+\"/json\", {}, function( error, response ) {\n//\t\t\t\tif ( error ) { console.log('Error:',ip, error); Sensori.update({ip: ip}, {$set:{ active: false}}); }\n//\t\t\t\telse { if (response.data !== null) {\n//\t\t\t\t\t\t\t\t\t\t\t\t\t// console.log(ip,\" (\" , response.data.Sensors[0].TaskName,\") - Count:\", response.data.Sensors[0].Total);\n//\t\t\t\t\t\t\t\t\t\t\t\t\tSensori.update({ip: ip}, {$set:{ active: true, location: response.data.Sensors[0].TaskName, note: 'counter:'+response.data.Sensors[0].Total}});\n//\t\t\t\t\t\t\t\t\t\t\t\t\t}\telse {console.log(ip,\" - No data !\"); Sensori.update({ip:ip}, {$set:{active: false}}); }\n//\t\t\t\t}\n//\t\t});\n//\t}\n  \n\tif (Raspberry && tipo == 'DHT22 (on PIN 22)') {\n\t\tvar readout = sensorLib.read();\n\t\tif (readout.temperature.toFixed(1) !== '0.0') {\n\t\t\t\t// console.log(ip,\" (Raspberry) - T:\", readout.temperature.toFixed(1),\"- U:\", readout.humidity.toFixed(1));\n\t\t\t\tSensori.update({ip: ip}, {$set:{ hum: readout.humidity.toFixed(1), active: true, temp: readout.temperature.toFixed(1)}});\n\t\t}\n\t}\n}\n\n\nfunction cron_cronotermostato () {\n\tvar today = moment().format('E');\n\tvar hournow = moment().format('HH');\n\tvar temphour = Cronotermostato.find({ dayofweek: parseInt(today)}).map(function(o){return [o.h001,o.h012,o.h023,o.h034,o.h045,o.h056,o.h067,o.h078,o.h089,o.h0910,o.h1011,o.h1112,o.h1213,o.h1314,o.h1415,o.h1516,o.h1617,o.h1718,o.h1819,o.h1920,o.h2021,o.h2122,o.h2223,o.h2324];})[0][parseInt(hournow)];\n\tvar sensoretermostato = Caldaia.findOne({}).sensoretermostato;\n\tvar isteresi = Caldaia.findOne({}).isteresi;\n\tvar temprilevata = Sensori.findOne({ location: sensoretermostato }).temp;\n\tconsole.log('today:',today,' - hournow:',hournow,' - temphour:',temphour,' - sensoretermostato:', sensoretermostato, ' - isteresi:',isteresi,' - temprilevata:', temprilevata);\n\tif ((temphour - isteresi) >= temprilevata) {\n\t\t\t\t\tCaldaia.update({}, {$set:{ statocaldaia: true}});\n\t\t\t\t\tswitchOnOff(true);\n\t\t\t} else {\n\t\t\t\t\tCaldaia.update({}, {$set:{ statocaldaia: false}});\n\t\t\t\t\tswitchOnOff(false);\n\t}\n}\n\n\n\nvar termostato = Caldaia.find({},{fields: {_id: true, statotermostato: true, timescheduler: true}}).observeChanges({\n\tchanged: function (id, s) {\n\t\tif (s.statotermostato === true) {\n\t\t\t//stop\n\t\t\tif (SyncedCron.nextScheduledAtDate('cronotermostato')) { SyncedCron.remove('cronotermostato');}\n\t\t\t//start\n\t\t\tSyncedCron.add({name: 'cronotermostato',schedule: function(parser) {return parser.recur().every(Caldaia.findOne().timescheduler).second();},job: cron_cronotermostato});\n\t\t\tCaldaia.update({}, {$set:{ statoriscaldamento: true }});\n\t\t} else {if (SyncedCron.nextScheduledAtDate('cronotermostato')) { SyncedCron.remove('cronotermostato');}}\n\t},  \n\tadded: function (id, s) {if (s.cronotermostato === true ){switchOnOff(true); Caldaia.update({}, {$set:{ statoriscaldamento: true }}); }}\n});\n\n\nvar riscaldamento = Caldaia.find({},{fields: {statoriscaldamento: true}}).observeChanges({\n\tchanged: function (id, s) {\n\t\t// workaround: per qulache motivo non funziona s.on s.ip\n\t\tif (s.statoriscaldamento === true) {switchOnOff(true);Caldaia.update({}, {$set:{ statocaldaia: true }});\n\t\t} else { switchOnOff(false); Caldaia.update({}, {$set:{ statocaldaia: false, statotermostato: false }});\t}\n\t},\n\tadded: function (id, s) {if (s.statoriscaldamento === true ) { switchOnOff(true); Caldaia.update({}, {$set:{ statocaldaia: true }}); }}\n});\n\n\nvar on = Sensori.find({},{fields: {ip: true, on: true, timescheduler: true}}).observeChanges({\n   changed: function (id, s) {\n\t\tvar ip = Sensori.findOne({_id: id}).ip;\n\t\t\tif (Sensori.findOne({_id: id}).on === true) {\n\t\t\t// shutdown\n\t\t\tif (SyncedCron.nextScheduledAtDate(ip +'_read sensors')) { SyncedCron.remove(ip +'_read sensors');}\n\t\t\t//activatesensor\n\t\t\tSyncedCron.add({\n\t\t\t\tname: ip+'_read sensors',\n\t\t\t\tschedule: function(parser) {return parser.recur().every(Sensori.findOne({ ip: ip }).timescheduler).second();},\n\t\t\t\tjob: function() {cron_read_sensor(ip); return ip+'_read sensors';}\n\t\t\t});\n\t\t\t} else {if (SyncedCron.nextScheduledAtDate(ip +'_read sensors')) { SyncedCron.remove(ip +'_read sensors');}}\n\t},\n\tadded: function (id, s) {\n\t\tvar ip = Sensori.findOne({_id: id}).ip;\n\t\tif (Sensori.findOne({_id: id}).on ===true){\n\t\t\t\tconsole.log(\"Added sensor:\", s.ip, s.on, s.timescheduler);\n\t\t\t\tSyncedCron.add({\n\t\t\t\t\tname: ip+'_read sensors',\n\t\t\t\t\tschedule: function(parser) {return parser.recur().every(Sensori.findOne({ ip: ip }).timescheduler).second();},\n\t\t\t\t\tjob: function() {cron_read_sensor(ip); return ip+'_read sensors';}\n\t\t\t\t});\n\t\t\t}\n   }\n });\n\n\nfunction cron_watt_after (now, response) {\n\tvar today = moment().format(\"YYYYMMDD\");\t\n\tvar matrix =[]; var csvfs ='';var solararr=[];\n    if (Raspberry) {csvfs = csvpath+today+\".csv\";} else {csvfs = csvpathwin;}\n  \n\t// Leggo immediatamente i valori de sensore per garantire il timeframe dei 5 minuti \t\t\n\tif (fs.existsSync(csvfs)) {      \n        matrix = (fs.readFileSync(csvfs).toString().split(\"\\n\").map(function(row){ return { x: moment(today +\" \"+ row.split(\",\")[0],\"YYYYMMDD HH:mm\").unix(), y: Number(row.split(\",\")[27])};})).slice(1,-1);\n\t\tsolararr = solar(matrix);\n\t\t//console.log('solarray',solarray);\n        Watt.update({day: today}, { $set: {solararr: solararr}},{upsert: true, multi: false});\n\t} else  {console.log('File not found: ',csvfs);} \n  \n\tif (response.data !== null) {       \n\t\tvar pulsearr = pulse (today,now,response.data.Sensors[0].Total,solararr);      \n\t//\tconsole.log('pulserray',pulsearr);      \n        Watt.update({day: today}, { $set: {pulsearr: pulsearr}},{upsert: true, multi: false});\n    } else { \n\t\t// console.log('Warning cron_watt (problem reading sensor):',today,' - ',response); \n\t\t\t}\n}\n\n\nfunction pulse (date,now,ytmp,solararr) {\n\tvar b = []; var x0 = 0; var y0 = 0; var e = Watt.findOne({day: date}); var sx=0; var sy=0;\n\tconsole.log('solararr.length',solararr.length);\n  \n\tif (solararr.length > 0) {sx = solararr[solararr.length-1].x; sy = solararr[solararr.length-1].y; }\n\tif (e && e.pulsearr)  {\n\t\te.pulsearr.push({x: now, y: 0, ytmp: ytmp });\n\t\te.pulsearr.forEach(function(p) {\n\t\t\tvar x1 = p.x; var y1 = p.ytmp; var deltat = (x1-x0)/1000;\n\t\t\tif (deltat <=0 || y1 < y0)  {console.log('!!!  y1:',y1,'y0:',y0,'x1:',x1,'x0:',x0);};\n          \n\t\t\tif (deltat > 0 && (y1 - y0) >= 0 ) {              \n\t\t\t\tvar y = Math.round(((y1 - y0)*3600/deltat),3);            \n                if (now === sx) { if (sy >= y) {y = (sy + y);} else {y = (sy - y);} }\n                console.log('now',now,'sx',sx,'sy',sy,'y',y,'y1',y1,'y0',y0);\n\t\t\t\tb.push({x: x1, y: y, ytmp: y1 });\n\t\t\t} else {console.log('Warning (pulse) deltat or (y1-y0):', deltat, '|', y1-y0);}           \n\t\t\tx0 = x1; y0 = y1;\n        });\n\t} else {b.push({x: now, y: 0, ytmp: ytmp }); console.log('First entry for pulsearr:', now);}  \n\treturn b; \n}\n\n\nfunction solar(matrix) {\n    var b = []; var x0 = 0; var y0 = 0;\n\tif (matrix)  {\n\t\tmatrix.forEach(function(s) {\n\t\t\tvar x1 = s.x; var y1 = s.y; var deltat = x1-x0;\n\t\t\tif (deltat > 0) {\n\t\t\t\tvar KwFull = Math.round(((y1 - y0)*3600/deltat*1000),3);\n\t\t\t\t//console.log('solar:',{x: x1*1000, y: KwFull });\n\t\t\t\tb.push({x: x1*1000, y: KwFull });\t\t\t\t\t\n\t\t\t} else {\n            //  console.log('Warning (solar) deltat:', deltat);\n            }\n\t\t\tx0 = x1; y0 = y1;\n\t\t});\n\t} else {console.log('No found MATRIX');}\n\treturn b;\n}\n\n\nfunction cron_watt () {\n\tvar now = Math.floor((moment().unix()));\n\tvar ip = Sensori.findOne({tipo: 'pulse'}).ip;\n\t// Leggo immediatamente i valori del sensore per garantire il timeframe dei 5 minuti  \n\tvar response = HTTP.get(\"http://\"+ip+\"/json\", {});\n\tsetTimeout(cron_watt_after(now*1000, response), 10000);\t\n}\n\n\nvar watt = SyncedCron.add({\n\tname: 'watt',\n\tschedule: function(parser) {return parser.recur().every(5).minute();},\n\t//schedule: function(parser) {return parser.recur().every(20).second();},\n\tjob: cron_watt\n});\n\n\n\nSyncedCron.config({log: false});\n\nSyncedCron.start();\n",
		"stylesheet": "\n/* CSS per Dashboard */\n\n.sensor {\n    margin:auto;\n    height:350px;\n\twidth:250px;\n  \tfloat: left;\n}\n\n\n.dynamicDiv {\n      width:250px;\n      height:175px;\n     /* float: left; */\n      border:solid 1px #c0c0c0;\n      background-color:#e1e1e1;\n      font-size:11px;\n      font-family:verdana;\n      color:#000;\n      padding:5px;\n }\n\n.myContainer {\n    margin:auto;\n    width:1100px;\n  \theight:350px;\n  float: left;\n}\n\n\n\n/* css per bottone tondo termostato */\n/*@import url('normalize.css');\n@import url('demo.css');\n*/\n/* GLOBALS */\n\n*,\n*:after,\n*:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n  padding: 0;\n  margin: 0;\n}\n\n.switch {\n  margin: 50px auto;\n  position: relative;\n}\n\n.switch label {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  display: block;\n}\n\n.switch input {\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  opacity: 0;\n  z-index: 100;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n\n/* DEMO 4 */\n\n.switch.demo4 {\n  width: 150px;\n  height: 150px;\n}\n\n.switch.demo4 label {\n  border-radius: 50%;\n  background: #b2ac9e;\n  background: -moz-linear-gradient(#f7f2f6, #b2ac9e);\n  background: -ms-linear-gradient(#f7f2f6, #b2ac9e);\n  background: -o-linear-gradient(#f7f2f6, #b2ac9e);\n  background: -webkit-gradient(linear, 0 0, 0 100%, from(#f7f2f6), to(#b2ac9e));\n  background: -webkit-linear-gradient(#f7f2f6, #b2ac9e);\n  background: linear-gradient(#f7f2f6, #b2ac9e);\n  position: relative;\n  color: #ff3333;\n\n  font-size: 70px;\n  text-align: center;\n  line-height: 150px;\n\n  -webkit-transition: all 0.3s ease-out;\n  -moz-transition: all 0.3s ease-out;\n  -ms-transition: all 0.3s ease-out;\n  -o-transition: all 0.3s ease-out;\n  transition: all 0.3s ease-out;\n\n  text-shadow: 0 2px 1px rgba(0,0,0,0.25);\n\n  box-shadow:\n    inset 0 2px 3px rgba(255,255,255,0.13),\n    0 5px 8px rgba(0,0,0,0.3),\n    0 10px 10px 4px rgba(0,0,0,0.3);\n  z-index: -1;\n}\n\n.switch.demo4 label:after {\n  content: \"\";\n  position: absolute;\n  left: -20px;\n  right: -20px;\n  top: -20px;\n  bottom: -20px;\n  z-index: -2;\n  border-radius: inherit;\n  box-shadow:\n    inset 0 1px 0 rgba(255,255,255,0.1),\n    0 1px 2px rgba(0,0,0,0.3),\n    0 0 10px rgba(0,0,0,0.15);\n\n}\n\n.switch.demo4 label:before {\n  content: \"\";\n  position: absolute;\n  left: -10px;\n  right: -10px;\n  top: -10px;\n  bottom: -10px;\n  z-index: -1;\n  border-radius: inherit;\n  box-shadow: inset 0 10px 10px rgba(0,0,0,0.13);\n  -webkit-filter:blur(1px);\n  -moz-filter:blur(1px);\n  -ms-filter:blur(1px);\n  -o-filter:blur(1px);\n  filter: blur(1px);\n}\n\n.switch.demo4 input:checked ~ label {\n  box-shadow:\n    inset 0 2px 3px rgba(255,255,255,0.13),\n    0 5px 8px rgba(0,0,0,0.35),\n    0 3px 10px 4px rgba(0,0,0,0.2);\n  color: #9abb82;\n}\n\n.switch.demo4 .icon-off:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  width: 70%;\n  height: 70%;\n  left: 50%;\n  top: 50%;\n  z-index: -1;\n  margin: -35% 0 0 -35%;\n  border-radius: 50%;\n  background: #d2cbc3;\n  background: -moz-linear-gradient(#cbc7bc, #d2cbc3);\n  background: -ms-linear-gradient(#cbc7bc, #d2cbc3);\n  background: -o-linear-gradient(#cbc7bc, #d2cbc3);\n  background: -webkit-gradient(linear, 0 0, 0 100%, from(#cbc7bc), to(#d2cbc3));\n  background: -webkit-linear-gradient(#cbc7bc, #d2cbc3);\n  background: linear-gradient(#cbc7bc, #d2cbc3);\n  box-shadow:\n    0 -2px 5px rgba(255,255,255,0.05),\n    0 2px 5px rgba(255,255,255,0.1);\n}\n",
		"copy_files": [
			{
				"source": "files\\font-awesome.css",
				"dest": "CLIENT_STYLES_DIR/font-awesome.css"
			},
			{
				"source": "files\\fontawesome-webfont.woff",
				"dest": "PUBLIC_FONTS_DIR/fontawesome-webfont.woff"
			},
			{
				"source": "files\\fontawesome-webfont.ttf",
				"dest": "PUBLIC_FONTS_DIR/fontawesome-webfont.ttf"
			},
			{
				"source": "files\\flame.gif",
				"dest": "PUBLIC_IMAGES_DIR/flame.gif"
			},
			{
				"source_content": "<template name=\"SensoriDettagli\">\n\t<div class=\"page-container container\" id=\"content\">\n\t\t<div class=\"row\" id=\"title_row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<h2 id=\"page_title\" class=\"pull-left\">\n\t\t\t\t\tSensore {{sensore_dettaglio.ip}}\n\t\t\t\t</h2>\n\t\t\t\t<div id=\"page_menu\" class=\"pull-right\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t\t<iframe src=\"http://{{sensore_dettaglio.ip}}\" height=\"1150\" width=\"100%\"></iframe>\n\t</div>\n</template>\n\n<template name=\"SensoriDettagliDettagliForm\">\n</template>\n",
				"dest": "CLIENT_VIEWS_DIR/sensori/dettagli/dettagli.html"
			},
			{
				"source": "files\\favicon.ico",
				"dest": "PUBLIC_DIR/favicon.ico"
			},
			{
				"source": "files\\meteor-icon.png",
				"dest": "PUBLIC_IMAGES_DIR/meteor-icon.png"
			},
			{
				"source": "files/esp8266-icon.png",
				"dest": "PUBLIC_IMAGES_DIR/esp8266-icon.png"
			},
			{
				"source": "files/rasp-icon.png",
				"dest": "PUBLIC_IMAGES_DIR/rasp-icon.png"
			},
			{
				"source": "files/highchart-icon.png",
				"dest": "PUBLIC_IMAGES_DIR/highchart-icon.png"
			},
			{
				"source": "files/meteor-kitchen-icon.png",
				"dest": "PUBLIC_IMAGES_DIR/meteor-kitchen-icon.png"
			},
			{
				"source_content": "this.PowerController = RouteController.extend({\n\ttemplate: \"Power\",\n\n\n\tyieldTemplates: {\n\t\t/*YIELD_TEMPLATES*/\n\t},\n\n\tonBeforeAction: function() {\n\t\tthis.next();\n\t},\n\n\taction: function() {\n\t\tif(this.isReady()) { this.render(); } else { this.render(\"loading\"); }\n\t\t/*ACTION_FUNCTION*/\n\t},\n\n\tisReady: function() {\n\t\tvar dayId = \"pageSession.get('sessionDate')\";\n\n\t\tvar subs = [\n\t\t\tMeteor.subscribe(\"watt_id\", dayId)\n\t\t//\tMeteor.subscribe(\"watt_list\")\n\t\t];\n\t\tvar ready = true;\n\t\t_.each(subs, function(sub) {\n\t\t\tif(!sub.ready())\n\t\t\t\tready = false;\n\t\t});\n\t\treturn ready;\n\t},\n\n\tdata: function() {\n\t\tvar dayId = \"pageSession.get('sessionDate')\";\n\n\t\tvar data = {\n\t\t\tparams: this.params || {},\n\t\t\twatt_id: Watt.findOne({day:dayId}, {})\n\t\t//\twatt_list: Watt.find({}, {})\n\t\t};\n\n\n\n\n\t\treturn data;\n\t},\n\n\tonAfterAction: function() {\n\n\t}\n});\n",
				"dest": "CLIENT_VIEWS_DIR/power/power_controller.js"
			}
		],
		"packages": {
			"meteor": [
				"percolate:synced-cron",
				"maazalik:highcharts-gauge",
				"perak:c3",
				"msavin:mongol"
			]
		}
	}
}