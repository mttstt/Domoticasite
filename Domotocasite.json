{
	"application": {
		"title": "Domoticasite",
		"theme": "bootswatch-flatly",
		"roles": [
			"admin",
			"user"
		],
		"default_role": "user",
		"collections": [],
		"queries": [
			{
				"name": "admin_users",
				"collection": "users",
				"filter": "{}"
			},
			{
				"name": "admin_user",
				"collection": "users",
				"filter": "{ \"_id\": \":userId\" }",
				"find_one": true
			},
			{
				"name": "users_null",
				"collection": "users",
				"filter": "{ \"_id\": null }",
				"find_one": true
			},
			{
				"name": "current_user_data",
				"collection": "users",
				"filter": "{ \"_id\": \"Meteor.userId()\" }",
				"find_one": true
			}
		],
		"public_zone": {
			"pages": [
				{
					"name": "home_public",
					"components": [
						{
							"name": "home_jumbotron",
							"title": "Domoticasite",
							"type": "jumbotron",
							"text": "Web Application for home automation, the main function are:<br />- Programmable thermostat<br />- Display environmental temperature and humidity in real-time<br />- Comparison between energy power generated by photovoltaic system and power consumed in the home.<br /><br /> It is a IOT (Internet of things) solution, implemented on Raspberry 2, with the use of Wi-Fi sensor. The Web application is implemented with Meteor-Kitchen.<br />",
							"button_title": "Continue &raquo;",
							"button_route": "tempe"
						}
					],
					"type": "page"
				},
				{
					"name": "login",
					"template": "login",
					"type": "page"
				},
				{
					"name": "register",
					"template": "register",
					"type": "page"
				},
				{
					"name": "verify_email",
					"template": "verify_email",
					"route_params": [
						"verifyEmailToken"
					],
					"type": "page"
				},
				{
					"name": "forgot_password",
					"template": "forgot_password",
					"type": "page"
				},
				{
					"name": "reset_password",
					"template": "reset_password",
					"route_params": [
						"resetPasswordToken"
					],
					"type": "page"
				},
				{
					"name": "tempe",
					"type": "page",
					"components": [
						{
							"name": "Test",
							"html": "<h3>Temperatura ed Umidita'</h3>\n<div id=\"container\" class=\"center\"></div> \n<div id=\"container-gauge\" style=\"width: 300px; height: 200px;\"></div>",
							"js": "/*\n * Function to draw the gauge\n */\n\nvar urlc = \"http://192.168.1.130:8081/Domotica/caldaia/\";\nvar urls = \"http://192.168.1.130:8081/Domotica/sensori/\";\nvar jsonData;\nfunction readStatus (readData) {\n  $.ajax({\n    url: urlc,\n    type: \"POST\",\n    data: JSON.stringify(readData),\n    contentType: \"application/json; charset=UTF-8\",     // formato DATI inviati\n    dataType: \"json\",                                   // formato dati ricevuti\n    success: function(data){\n \tjsonData = data;\n\tgoChart();\n\tchartFunction();\n    },\n    failure: function(errMsg) {alert(errMsg);}\n  });\n}\n   \n    \n    \nvar gaugeOptions = {\n        chart: {\n        type: 'solidgauge',\n\t    backgroundColor: '#d3dae2'\n        },\n        title: null,\n        pane: {\n            center: ['50%', '85%'],\n            size: '140%',\n            startAngle: -90,\n            endAngle: 90,\n            background: {\n                backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || '#EEE',\n                innerRadius: '60%',\n                outerRadius: '100%',\n                shape: 'arc'\n            }\n        },\n        tooltip: {\n            enabled: true\n        },\n\tcredits: {\n\t    enabled: false\n\t},\n        // the value axis\n        yAxis: {\n            stops: [\n                [0.4, '#DF5353'], // red\n                [0.5, '#55BF3B'], // green\n                [0.7, '#DF5353']  // red\n            ],\n            lineWidth: 0,\n            minorTickInterval: null,\n            tickPixelInterval: 40,\n            tickWidth: 0,\n            title: {\n                y: -70\n            },\n            labels: {\n                y: 16\n            }\n        },\n        plotOptions: {\n            solidgauge: {\n                dataLabels: {\n                    y: 5,\n                    borderWidth: 0,\n                    useHTML: true\n                }\n            }\n        }\n    };\nvar optionsT = {\n        yAxis: {\n            min: 0,\n            max: 40,\n            title: {\n                text: 'Temperatura'\n            }\n        },\n        series: [{\n            name: 'Temperatura',\n            data: [15],\n            dataLabels: {\n                format: '<div style=\"text-align:center\"><span style=\"font-size:18px;color:' +\n                         ((Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black') + '\">{y:.1f}</span> ' +\n                         '<span style=\"font-size:18px;color:silver\">C</span></div>'\n\t    }\n        }]\n};\nvar optionsU = {\n        yAxis: {\n            min: 0,\n            max: 100,\n            title: {\n                text: 'Umidita\\''\n            }\n        },\n        series: [{\n            name: 'Umidita\\'',\n            data: [50],\n            dataLabels: {\n                format: '<div style=\"text-align:center\"><span style=\"font-size:18px;color:' +\n                        ((Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black') + '\">{y:.1f}</span> ' +\n                       '<span style=\"font-size:18px;color:silver\">%</span></div>'\n            }\n        }]\n};\nfunction create_div_dynamic(i){\n      dv = document.createElement('div'); // create dynamically div tag\n      dv.setAttribute('id',i);       //give id to it\n      dv.className =\"dynamicDiv\";                // set the style classname\n      //set the inner styling of the div tag\n      dv.style.margin = \"0px auto\";\n      container.appendChild(dv);\n}\n\nfunction goChart() {\n   \n   var obj1 = jsonData.sensors;\n   for(x in obj1) {\n\t     create_div_dynamic(obj1[x].location+'T');\n\t     create_div_dynamic(obj1[x].location+'U');\n//             document.getElementById(\"container\").innerHTML += html\n\t     new Highcharts['Chart'](Highcharts.merge(gaugeOptions, optionsT, {chart: { renderTo: obj1[x].location +'T' }}));\n\t     new Highcharts['Chart'](Highcharts.merge(gaugeOptions, optionsU, {chart: { renderTo: obj1[x].location +'U' }}));\n   }\n}\n\n\n\n// ..................................................................\n// Per ovviare i limiti intradominio del protocollo JSON\n// ho configurato il proxypass sul web server apache e modificato\n// di conseguenza l'url\n//..................................................................\nfunction chartFunction() {\n   var obj = jsonData.sensors;\n   for(x in obj) {\n        $.getJSON(urls+obj[x].location, function(data) {\n        })\n        .done(function(data) {\n\t\t$('#'+data.id+'T').highcharts().series[0].points[0].update(data.t*1);\n                $('#'+data.id+'U').highcharts().series[0].points[0].update(data.u*1);\n\t\t$('#'+data.id+'T').highcharts().series[0].name = data.dt;\n\t    $('#'+data.id+'U').highcharts().series[0].name = data.dt;\n\t\t$('#'+data.id+'T').highcharts().yAxis[0].setTitle({ text: 'Temperatura '+data.id+\" (C)\" });\n\t\t$('#'+data.id+'U').highcharts().yAxis[0].setTitle({ text: 'Umidita\\' '+data.id+\" (%)\" });\n//                document.getElementById(data.id).innerHTML = data.id+'  --  '+data.dt;\n                console.log(\"Sensor: \", data.id, \"Temp.: \" , data.t, \"Umid.: \", data.u,\" (\",data.dt,\")\");\n//              console.log('getJSON request succeeded!');\n        })\n        .fail(function(jqXHR, textStatus, errorThrown) {\n                console.log('getJSON request failed! ' + textStatus );\n        })\n        .always(function() {\n//              console.log('getJSON request ended!');\n        });\n  }\n  setTimeout(chartFunction, 10000);\n};\n\n\n/*\n * Call the function to built the chart when the template is rendered\n */\nTemplate.Tempe.rendered = function() {\n    readStatus({\"Stato_riscaldamento\":\"?\"});\n};\n",
							"type": "custom_component"
						}
					]
				}
			],
			"components": [
				{
					"name": "left_menu",
					"type": "menu",
					"class": "nav navbar-nav",
					"dest_selector": "#menu",
					"items": [
						{
							"title": "Home",
							"route": "home_public"
						}
					]
				},
				{
					"name": "right_menu",
					"type": "menu",
					"class": "nav navbar-nav navbar-right",
					"dest_selector": "#menu",
					"items": [
						{
							"title": "Register",
							"route": "register"
						},
						{
							"title": "Login",
							"route": "login"
						}
					]
				}
			],
			"type": "zone"
		},
		"private_zone": {
			"pages": [
				{
					"name": "home_private",
					"title": "Welcome {{userFullName}}!",
					"type": "page"
				},
				{
					"name": "admin",
					"roles": [
						"admin"
					],
					"pages": [
						{
							"name": "users",
							"components": [
								{
									"name": "view",
									"type": "data_view",
									"title": "Users",
									"text_if_empty": "No users yet",
									"query_name": "admin_users",
									"fields": [
										{
											"name": "profile.name",
											"title": "Name",
											"type": "string"
										},
										{
											"name": "profile.email",
											"title": "E-mail",
											"type": "string"
										},
										{
											"name": "roles",
											"title": "Role",
											"type": "string"
										}
									],
									"insert_route": "admin.users.insert",
									"edit_route": "admin.users.edit",
									"edit_route_params": [
										{
											"name": "userId",
											"value": "this._id"
										}
									],
									"details_route": "admin.users.details",
									"details_route_params": [
										{
											"name": "userId",
											"value": "this._id"
										}
									]
								}
							],
							"pages": [
								{
									"name": "details",
									"route_params": [
										"userId"
									],
									"components": [
										{
											"name": "details_form",
											"type": "form",
											"mode": "read_only",
											"title": "User details",
											"query_name": "admin_user",
											"fields": [
												{
													"name": "profile.name",
													"title": "Name",
													"type": "string"
												},
												{
													"name": "profile.email",
													"title": "E-mail",
													"type": "email"
												},
												{
													"name": "roles",
													"title": "Role",
													"type": "string"
												}
											],
											"close_route": "admin.users",
											"back_route": "admin.users"
										}
									],
									"type": "page"
								},
								{
									"name": "insert",
									"components": [
										{
											"name": "insert_form",
											"type": "form",
											"mode": "insert",
											"title": "Add new user",
											"submit_route": "admin.users",
											"cancel_route": "admin.users",
											"query_name": "users_null",
											"fields": [
												{
													"name": "profile.name",
													"title": "Name",
													"required": true,
													"type": "string"
												},
												{
													"name": "profile.email",
													"title": "E-mail",
													"type": "email",
													"required": true
												},
												{
													"name": "password",
													"title": "Password",
													"input": "password",
													"required": true,
													"type": "string"
												}
											]
										}
									],
									"type": "page"
								},
								{
									"name": "edit",
									"route_params": [
										"userId"
									],
									"components": [
										{
											"name": "edit_form",
											"type": "form",
											"mode": "update",
											"title": "Edit user",
											"submit_route": "admin.users",
											"cancel_route": "admin.users",
											"query_name": "admin_user",
											"fields": [
												{
													"name": "profile.name",
													"title": "Name",
													"required": true,
													"type": "string"
												},
												{
													"name": "profile.email",
													"title": "E-mail",
													"type": "email",
													"required": true
												},
												{
													"name": "roles",
													"type": "array",
													"title": "Role",
													"input": "radio",
													"input_items": [
														{
															"value": "user",
															"title": "User"
														},
														{
															"value": "admin",
															"title": "Admin"
														},
														{
															"value": "blocked",
															"title": "Blocked"
														}
													]
												}
											]
										}
									],
									"type": "page"
								}
							],
							"type": "page"
						}
					],
					"components": [
						{
							"name": "side_menu",
							"type": "menu",
							"class": "nav nav-stacked nav-pills",
							"items": [
								{
									"title": "Users",
									"route": "admin.users"
								}
							]
						}
					],
					"type": "page"
				},
				{
					"name": "user_settings",
					"roles": [
						"user",
						"admin"
					],
					"pages": [
						{
							"name": "profile",
							"components": [
								{
									"name": "edit_form",
									"type": "form",
									"mode": "update",
									"title": "Edit your profile",
									"submit_route": "user_settings.profile",
									"query_name": "current_user_data",
									"fields": [
										{
											"name": "profile.name",
											"title": "Name",
											"required": true,
											"type": "string"
										},
										{
											"name": "profile.email",
											"title": "E-mail",
											"type": "email",
											"required": true
										},
										{
											"name": "profile.facebook",
											"title": "Facebook URL",
											"type": "string"
										},
										{
											"name": "profile.google",
											"title": "Google+ URL",
											"type": "string"
										},
										{
											"name": "profile.twitter",
											"title": "Twitter ID",
											"type": "string"
										},
										{
											"name": "profile.website",
											"title": "Website URL",
											"type": "string"
										}
									]
								}
							],
							"type": "page"
						},
						{
							"name": "change_pass",
							"template": "change_pass",
							"type": "page"
						}
					],
					"components": [
						{
							"name": "side_menu",
							"type": "menu",
							"class": "nav nav-stacked nav-pills",
							"items": [
								{
									"title": "Profile",
									"route": "user_settings.profile"
								},
								{
									"title": "Change password",
									"route": "user_settings.change_pass"
								}
							]
						}
					],
					"type": "page"
				},
				{
					"name": "logout",
					"template": "logout",
					"type": "page"
				}
			],
			"components": [
				{
					"name": "left_menu",
					"type": "menu",
					"class": "nav navbar-nav",
					"dest_selector": "#menu",
					"items": [
						{
							"title": "Home",
							"route": "home_private",
							"icon_class": "fa fa-home"
						}
					]
				},
				{
					"name": "right_menu",
					"type": "menu",
					"class": "nav navbar-nav navbar-right",
					"dest_selector": "#menu",
					"items": [
						{
							"title": "Admin",
							"route": "admin",
							"icon_class": "fa fa-wrench"
						},
						{
							"title": "{{userEmail}}",
							"items": [
								{
									"title": "Settings",
									"route": "user_settings"
								},
								{
									"title": "Logout",
									"route": "logout"
								}
							],
							"icon_class": "fa fa-cog"
						}
					]
				}
			],
			"type": "zone"
		},
		"footer_text": "@ 2016 mtt stt",
		"free_zone": {
			"type": "zone"
		},
		"login_with_google": true,
		"packages": {
			"meteor": [
				"maazalik:highcharts-gauge"
			]
		}
	}
}